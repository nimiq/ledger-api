{"version":3,"file":"lazy-chunk-request-get-extended-public-key-bitcoin.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/bitcoin/bitcoin-utils.ts","source-mapped://source-mapped/src/high-level-api/requests/bitcoin/request-get-extended-public-key-bitcoin.ts"],"sourcesContent":["import { Network, AddressTypeBitcoin } from '../../constants';\n\ntype NetworkInfo = import('./bitcoin-lib').networks.Network;\n\n// TODO if in the future the interchangeability of bitcoin-lib with the Nimiq hub's BitcoinJS is not needed anymore,\n//  this can move directly into the lazy loaded bitcoin-lib and then also be lazy loaded.\nexport async function getNetworkInfo(network: Network, addressType: AddressTypeBitcoin): Promise<NetworkInfo> {\n    // async because bitcoin-lib is lazy loaded\n    const { networks } = await import('./bitcoin-lib');\n\n    const result: NetworkInfo = {\n        [Network.MAINNET]: networks.bitcoin,\n        [Network.TESTNET]: networks.testnet,\n    }[network];\n    if (!result) throw new Error(`Unsupported network ${network}`);\n\n    // Bip32 version bytes for different address types which are not all defined by the bip32 lib,\n    // see https://github.com/satoshilabs/slips/blob/master/slip-0132.md#registered-hd-version-bytes\n    const versionBytes = {\n        [AddressTypeBitcoin.LEGACY]: {\n            [Network.MAINNET]: networks.bitcoin.bip32,\n            [Network.TESTNET]: networks.testnet.bip32,\n        },\n        [AddressTypeBitcoin.P2SH_SEGWIT]: {\n            [Network.MAINNET]: {\n                public: 0x049d7cb2, // ypub\n                private: 0x049d7878, // yprv\n            },\n            [Network.TESTNET]: {\n                public: 0x044a5262, // upub\n                private: 0x044a4e28, // uprv\n            },\n        },\n        [AddressTypeBitcoin.NATIVE_SEGWIT]: {\n            [Network.MAINNET]: {\n                public: 0x04b24746, // zpub\n                private: 0x04b2430c, // zprv\n            },\n            [Network.TESTNET]: {\n                public: 0x045f1cf6, // vpub\n                private: 0x045f18bc, // vprv\n            },\n        },\n    }[addressType][network]; // TODO should be using optional chaining here once we update rollup\n    if (!versionBytes) throw new Error(`Unknown version bytes for network ${network}, address type ${addressType}`);\n\n    return {\n        ...result,\n        bip32: versionBytes,\n    };\n}\n\n// Taken from https://github.com/LedgerHQ/ledger-wallet-webtool/blob/master/src/PathFinderUtils.js#L31\n// Also see https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-btc/src/compressPublicKey.js for a version\n// operating on buffers. However, usage requires then loading the Buffer polyfill.\nexport function compressPublicKey(publicKey: string): string {\n    let compressedKeyIndex;\n    if (publicKey.substring(0, 2) !== '04') {\n        throw new Error('Invalid public key format');\n    }\n    if (parseInt(publicKey.substring(128, 130), 16) % 2 !== 0) {\n        compressedKeyIndex = '03';\n    } else {\n        compressedKeyIndex = '02';\n    }\n    return compressedKeyIndex + publicKey.substring(2, 66);\n}\n","import RequestBitcoin from './request-bitcoin';\nimport { compressPublicKey, getNetworkInfo } from './bitcoin-utils';\nimport { AddressTypeBitcoin, Network, RequestTypeBitcoin } from '../../constants';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nconst KEY_PATH_REGEX = new RegExp(\n    '^'\n    + '(44|49|84)\\'' // purpose id; BIP44 (BTC legacy) / BIP49 (BTC nested SegWit) / BIP84 (BTC native SegWit)\n    + '/(0|1)\\'' // coin type; 0 for Bitcoin Mainnet, 1 for Bitcoin Testnet\n    + '/\\\\d+\\'' // account index; allow only xpubs for specific accounts\n    + '(?:/\\\\d+\\'?)*' // sub paths; No constraints as they can be circumvented anyway by deriving from higher level xpub\n    + '$',\n);\n\nexport default class RequestGetExtendedPublicKeyBitcoin extends RequestBitcoin<string> {\n    public readonly type: RequestTypeBitcoin.GET_EXTENDED_PUBLIC_KEY = RequestTypeBitcoin.GET_EXTENDED_PUBLIC_KEY;\n    public readonly keyPath: string;\n    public readonly network: Network;\n    private readonly _addressType: AddressTypeBitcoin;\n\n    constructor(keyPath: string, expectedWalletId?: string) {\n        super(expectedWalletId);\n        this.keyPath = keyPath;\n\n        // Check for keyPath validity. Not using parseBip32Path from bip32-utils as we allow exporting xpubs at\n        // arbitrary levels. Further restrictions could be circumvented anyways by deriving from higher level xpub.\n        const keyPathMatch = keyPath.match(KEY_PATH_REGEX);\n        if (!keyPathMatch) {\n            throw new ErrorState(\n                ErrorType.REQUEST_ASSERTION_FAILED,\n                `Invalid keyPath ${keyPath}. Paths must follow bip44 and at least specify the purpose id`\n                    + ' (allowed are 44\\', 49\\', 84\\'), coin type (allowed are 0\\', 1\\') and account index (hardened).',\n                this,\n            );\n        }\n\n        const [, purposeId, networkId] = keyPathMatch;\n        this._addressType = {\n            44: AddressTypeBitcoin.LEGACY,\n            49: AddressTypeBitcoin.P2SH_SEGWIT,\n            84: AddressTypeBitcoin.NATIVE_SEGWIT,\n        }[purposeId as '44' | '49' | '84'];\n        this.network = {\n            0: Network.MAINNET,\n            1: Network.TESTNET,\n        }[networkId as '0' | '1'];\n\n        // Preload bitcoin lib. Ledger Bitcoin api is already preloaded by parent class. Ignore errors.\n        this._loadBitcoinLib().catch(() => {});\n    }\n\n    public async call(transport: Transport): Promise<string> {\n        // Build xpub as specified in bip32\n        // (https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format)\n        const verificationPath = '0/0';\n\n        // Note: We make api calls outside of the try...catch block to let the exceptions fall through such that\n        // _callLedger can decide how to behave depending on the api error. Load errors are converted to\n        // LOADING_DEPENDENCIES_FAILED error states by _getLowLevelApi and _LoadBitcoinLib. All other errors\n        // are converted to REQUEST_ASSERTION_FAILED errors which stop the execution of the request.\n        const [\n            { bip32 },\n            [parentPubKey, parentChainCode, pubKey, chainCode, verificationPubKey, verificationChainCode],\n        ] = await Promise.all([\n            this._loadBitcoinLib(), // throws LOADING_DEPENDENCIES_FAILED on failure\n            (async () => {\n                // Fetch the data from Ledger required for xpub calculation\n                // TODO Requesting the public key causes a confirmation screen to be displayed on the Ledger for u2f and\n                //  WebAuthn for every request if the user has this privacy feature enabled in the Bitcoin app.\n                //  Subsequent requests can provide a permission token in _getLowLevelApi to avoid this screen (see\n                //  https://github.com/LedgerHQ/app-bitcoin/blob/master/doc/btc.asc#get-wallet-public-key). This token\n                //  is however not supported in @ledgerhq/hw-app-btc and therefore has to be implemented by ourselves.\n                const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED\n                const parentPath = this.keyPath.substring(0, this.keyPath.lastIndexOf('/'));\n                // ledger requests have to be sent sequentially as ledger can only perform one request at a time\n                const {\n                    publicKey: parentPubKeyHex,\n                    chainCode: parentChainCodeHex,\n                } = await api.getWalletPublicKey(parentPath);\n                const {\n                    publicKey: pubKeyHex,\n                    chainCode: chainCodeHex,\n                } = await api.getWalletPublicKey(this.keyPath);\n                const {\n                    publicKey: verificationPubKeyHex,\n                    chainCode: verificationChainCodeHex,\n                } = await api.getWalletPublicKey(`${this.keyPath}/${verificationPath}`);\n                return [\n                    Buffer.from(compressPublicKey(parentPubKeyHex), 'hex'),\n                    Buffer.from(parentChainCodeHex, 'hex'),\n                    Buffer.from(compressPublicKey(pubKeyHex), 'hex'),\n                    Buffer.from(chainCodeHex, 'hex'),\n                    Buffer.from(compressPublicKey(verificationPubKeyHex), 'hex'),\n                    Buffer.from(verificationChainCodeHex, 'hex'),\n                ];\n            })(),\n        ]);\n\n        try {\n            // Note getNetworkInfo is only async because it lazy loads the bitcoin lib, which is already loaded at this\n            // point. Therefore putting it into the Promise.all has no further upside and errors within the call should\n            // become REQUEST_ASSERTION_FAILED exceptions.\n            const networkInfo = await getNetworkInfo(this.network, this._addressType);\n            const parent = bip32.fromPublicKey(parentPubKey, parentChainCode, networkInfo);\n            const parentFingerprint = parent.fingerprint.readUInt32BE(0); // this is calculated from the pub key only\n            const keyPathParts = this.keyPath.split('/');\n            const depth = keyPathParts.length;\n            const index = Number.parseInt(keyPathParts[depth - 1], 10)\n                + (this.keyPath.endsWith('\\'') ? 0x80000000 : 0); // set index for hardened paths according to bip32\n\n            // Create the xpub from the data we collected. Unfortunately, the bip32 lib does not expose the generic\n            // constructor, such that we have to set some private properties manually. But we try to do it in a future\n            // proof and minification safe manner.\n            // TODO make this less hacky\n            /* eslint-disable dot-notation */\n            const extendedPubKey = bip32.fromPublicKey(pubKey, chainCode, networkInfo) as\n                ReturnType<typeof bip32.fromPublicKey> & {\n                    __DEPTH: number,\n                    __INDEX: number,\n                    __PARENT_FINGERPRINT: number,\n                };\n            if (extendedPubKey.__DEPTH === 0) {\n                extendedPubKey.__DEPTH = depth;\n            } else if (extendedPubKey['__DEPTH'] === 0) {\n                extendedPubKey['__DEPTH'] = depth;\n            } else {\n                throw new Error('Failed to construct xpub, couldn\\'t set __DEPTH.');\n            }\n            if (extendedPubKey.__INDEX === 0) {\n                extendedPubKey.__INDEX = index;\n            } else if (extendedPubKey['__INDEX'] === 0) {\n                extendedPubKey['__INDEX'] = index;\n            } else {\n                throw new Error('Failed to construct xpub, couldn\\'t set __INDEX.');\n            }\n            if (extendedPubKey.__PARENT_FINGERPRINT === 0) {\n                extendedPubKey.__PARENT_FINGERPRINT = parentFingerprint;\n            } else if (extendedPubKey['__PARENT_FINGERPRINT'] === 0) {\n                extendedPubKey['__PARENT_FINGERPRINT'] = parentFingerprint;\n            } else {\n                throw new Error('Failed to construct xpub, couldn\\'t set __PARENT_FINGERPRINT.');\n            }\n            /* eslint-disable dot-notation */\n\n            // Verify that the generated xpub is correct by deriving an example child and comparing it to the result\n            // calculated by the Ledger device. Do not verify the Ledger generated address as it is derived from the\n            // pub key anyways.\n            const verificationDerivation = extendedPubKey.derivePath(verificationPath);\n            if (!verificationDerivation.publicKey.equals(verificationPubKey)\n                || !verificationDerivation.chainCode.equals(verificationChainCode)) {\n                throw new Error('Failed to verify the constructed xpub.');\n            }\n\n            return extendedPubKey.toBase58();\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e, this);\n        }\n    }\n}\n"],"names":[],"mappings":"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"}