{"version":3,"file":"lazy-chunk-request-nimiq.es.js","sources":["source-mapped://source-mapped/src/lib/load-nimiq.ts","source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-nimiq.ts"],"sourcesContent":["type Nimiq = typeof import('@nimiq/core-web');\n\n// Use jsdelivr instead of nimiq cdn to avoid getting blocked by ad blockers.\nconst coreBasePath = 'https://cdn.jsdelivr.net/npm/@nimiq/core-web/';\n\nlet nimiqCorePromise: Promise<Nimiq> | null = null;\nlet nimiqCryptographyPromise: Promise<void> | null = null;\n\n/**\n * Lazy-load the Nimiq core api from the cdn server if it's not loaded yet.\n */\nexport async function loadNimiqCore(coreVariant: 'web' | 'web-offline' = 'web-offline'): Promise<Nimiq> {\n    // @ts-ignore Return global Nimiq if already loaded.\n    if (window.Nimiq) return window.Nimiq;\n\n    nimiqCorePromise = nimiqCorePromise || new Promise((resolve, reject) => {\n        const $head = document.getElementsByTagName('head')[0];\n        const $script = document.createElement('script');\n        $script.type = 'text/javascript';\n        $script.onload = () => {\n            $script.parentNode!.removeChild($script);\n            resolve();\n        };\n        $script.onerror = (e) => {\n            $script.parentNode!.removeChild($script);\n            reject(e);\n        };\n        $script.src = `${coreBasePath}${coreVariant}.js`;\n        $head.appendChild($script);\n    }).then(\n        () => {\n            // @ts-ignore Nimiq is global but to discourage usage as global var we did not declare a global type.\n            const { Nimiq } = window;\n            return Nimiq;\n        },\n        (e) => {\n            nimiqCorePromise = null;\n            return Promise.reject(e);\n        },\n    );\n    return nimiqCorePromise;\n}\n\n/**\n * Load the WebAssembly and module for cryptographic functions. You will have to do this before calculating hashes,\n * deriving keys or addresses, signing transactions or messages, etc.\n */\nexport async function loadNimiqCryptography(): Promise<void> {\n    nimiqCryptographyPromise = nimiqCryptographyPromise || (async () => {\n        try {\n            // preload wasm in parallel\n            preloadAsset(`${coreBasePath}worker-wasm.wasm`, 'fetch', true);\n            preloadAsset(`${coreBasePath}worker-wasm.js`, 'script');\n\n            const Nimiq = await loadNimiqCore();\n            await Nimiq.WasmHelper.doImport();\n        } catch (e) {\n            nimiqCryptographyPromise = null;\n            throw e;\n        }\n    })();\n    return nimiqCryptographyPromise;\n}\n\nfunction preloadAsset(asset: string, as: string, crossOrigin?: boolean) {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = as;\n    link.href = asset;\n    link.onload = link.onerror = () => document.head.removeChild(link); // eslint-disable-line no-multi-assign\n    if (crossOrigin) link.crossOrigin = '';\n    document.head.appendChild(link);\n}\n","import Request, { CoinAppConnection } from '../request';\nimport { Coin, RequestTypeNimiq } from '../../constants';\nimport { getBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\nimport { loadNimiqCore, loadNimiqCryptography } from '../../../lib/load-nimiq';\n\ntype Nimiq = typeof import('@nimiq/core-web');\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype LowLevelApiConstructor = typeof import('../../../low-level-api/low-level-api').default;\n\ntype LowLevelApi = InstanceType<LowLevelApiConstructor>;\n\nexport { RequestTypeNimiq };\n\nexport default abstract class RequestNimiq<T> extends Request<T> {\n    private static _lowLevelApiPromise: Promise<LowLevelApi> | null = null;\n\n    public readonly coin: Coin.NIMIQ = Coin.NIMIQ;\n    public readonly requiredApp: string = 'Nimiq';\n    public readonly minRequiredAppVersion: string = '1.4.2'; // first version supporting web usb\n\n    protected constructor(expectedWalletId?: string) {\n        super(expectedWalletId);\n\n        // Preload dependencies. Nimiq lib is preloaded individually by request child classes that need it.\n        // Ignore errors.\n        Promise.all([\n            this._loadLowLevelApi(), // needed by all requests\n            this._isWalletIdDerivationRequired ? this._loadNimiq() : null,\n        ]).catch(() => {});\n    }\n\n    public async checkCoinAppConnection(transport: Transport): Promise<CoinAppConnection> {\n        const coinAppConnection = await super.checkCoinAppConnection(transport, 'w0w');\n        if (!this._isWalletIdDerivationRequired) return coinAppConnection; // skip wallet id derivation\n\n        // Note that api and Nimiq are preloaded in the constructor, therefore we don't need to optimize for load order\n        // or execution order here.\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        // Set validate to false as otherwise the call is much slower. For U2F this can also unfreeze the ledger app,\n        // see transport-comparison.md. However, not sure whether this is still true today and as it's less relevant now\n        // with WebUsb being used by default, we ignore this side effect for !this._isWalletIdDerivationRequired case.\n        const { publicKey: firstAddressPubKeyBytes } = await api.getPublicKey(\n            getBip32Path({ coin: Coin.NIMIQ, addressIndex: 0 }),\n            false, // validate\n            false, // display\n        );\n\n        const Nimiq = await this._loadNimiq(); // throws LOADING_DEPENDENCIES_FAILED on failure\n\n        // Compute wallet id. Use sha256 as blake2b yields the nimiq address\n        const walletId = Nimiq.Hash.sha256(firstAddressPubKeyBytes).toBase64();\n        this._checkExpectedWalletId(walletId);\n        coinAppConnection.walletId = walletId;\n        return coinAppConnection;\n    }\n\n    protected async _getLowLevelApi(transport: Transport): Promise<LowLevelApi> {\n        if (!RequestNimiq._lowLevelApiPromise || transport !== (await RequestNimiq._lowLevelApiPromise).transport) {\n            // no low level api instantiated yet or transport / transport type changed in the meantime\n            RequestNimiq._lowLevelApiPromise = this._loadLowLevelApi()\n                .then(\n                    (LowLevelApi: LowLevelApiConstructor) => new LowLevelApi(transport),\n                    (e) => {\n                        RequestNimiq._lowLevelApiPromise = null;\n                        return Promise.reject(e);\n                    },\n                );\n        }\n        return RequestNimiq._lowLevelApiPromise;\n    }\n\n    private async _loadLowLevelApi(): Promise<LowLevelApiConstructor> {\n        try {\n            // build the low-level-api from source instead of taking it from dist to create optimized chunks and to\n            // avoid double bundling of dependencies like buffer.\n            return (await import('../../../low-level-api/low-level-api')).default;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e.message || e}`,\n                this,\n            );\n        }\n    }\n\n    protected async _loadNimiq(): Promise<Nimiq> {\n        try {\n            // Note that we don't need to cache a promise as loadNimiqCore and loadNimiqCryptography already do that.\n            const [Nimiq] = await Promise.all([\n                loadNimiqCore(),\n                // needed for wallet id hashing and pub key to address derivation in SignatureProof and BasicTransaction\n                loadNimiqCryptography(),\n            ]);\n            return Nimiq;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e.message || e}`,\n                this,\n            );\n        }\n    }\n}\n"],"names":[],"mappings":";;;AAEA;AACA,MAAM,YAAY,GAAG,+CAA+C,CAAC;AAErE,IAAI,gBAAgB,GAA0B,IAAI,CAAC;AACnD,IAAI,wBAAwB,GAAyB,IAAI,CAAC;AAE1D;;;AAGO,eAAe,aAAa,CAAC,cAAqC,aAAa;;IAElF,IAAI,MAAM,CAAC,KAAK;QAAE,OAAO,MAAM,CAAC,KAAK,CAAC;IAEtC,gBAAgB,GAAG,gBAAgB,IAAI,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QAC/D,MAAM,KAAK,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjD,OAAO,CAAC,IAAI,GAAG,iBAAiB,CAAC;QACjC,OAAO,CAAC,MAAM,GAAG;YACb,OAAO,CAAC,UAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACzC,OAAO,EAAE,CAAC;SACb,CAAC;QACF,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;YAChB,OAAO,CAAC,UAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,CAAC,CAAC,CAAC;SACb,CAAC;QACF,OAAO,CAAC,GAAG,GAAG,GAAG,YAAY,GAAG,WAAW,KAAK,CAAC;QACjD,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;KAC9B,CAAC,CAAC,IAAI,CACH;;QAEI,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QACzB,OAAO,KAAK,CAAC;KAChB,EACD,CAAC,CAAC;QACE,gBAAgB,GAAG,IAAI,CAAC;QACxB,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAC5B,CACJ,CAAC;IACF,OAAO,gBAAgB,CAAC;AAC5B,CAAC;AAED;;;;AAIO,eAAe,qBAAqB;IACvC,wBAAwB,GAAG,wBAAwB,IAAI,CAAC;QACpD,IAAI;;YAEA,YAAY,CAAC,GAAG,YAAY,kBAAkB,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/D,YAAY,CAAC,GAAG,YAAY,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YAExD,MAAM,KAAK,GAAG,MAAM,aAAa,EAAE,CAAC;YACpC,MAAM,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;SACrC;QAAC,OAAO,CAAC,EAAE;YACR,wBAAwB,GAAG,IAAI,CAAC;YAChC,MAAM,CAAC,CAAC;SACX;KACJ,GAAG,CAAC;IACL,OAAO,wBAAwB,CAAC;AACpC,CAAC;AAED,SAAS,YAAY,CAAC,KAAa,EAAE,EAAU,EAAE,WAAqB;IAClE,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAC5C,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;IACrB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACb,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACnE,IAAI,WAAW;QAAE,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACvC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACpC,CAAC;;;;IC1DD,MAA8B,YAAgB,SAAQ,OAAU;QAO5D,YAAsB,gBAAyB;YAC3C,KAAK,CAAC,gBAAgB,CAAC,CAAC;YALZ,SAAI,GAAe,IAAI,CAAC,KAAK,CAAC;YAC9B,gBAAW,GAAW,OAAO,CAAC;YAC9B,0BAAqB,GAAW,OAAO,CAAC;;;YAOpD,OAAO,CAAC,GAAG,CAAC;gBACR,IAAI,CAAC,gBAAgB,EAAE;gBACvB,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI;aAChE,CAAC,CAAC,KAAK,CAAC,SAAQ,CAAC,CAAC;SACtB;QAEM,MAAM,sBAAsB,CAAC,SAAoB;YACpD,MAAM,iBAAiB,GAAG,MAAM,KAAK,CAAC,sBAAsB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC/E,IAAI,CAAC,IAAI,CAAC,6BAA6B;gBAAE,OAAO,iBAAiB,CAAC;;;YAIlE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;;;;YAIlD,MAAM,EAAE,SAAS,EAAE,uBAAuB,EAAE,GAAG,MAAM,GAAG,CAAC,YAAY,CACjE,YAAY,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,EACnD,KAAK;YACL,KAAK,CACR,CAAC;YAEF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;;YAGtC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,QAAQ,EAAE,CAAC;YACvE,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YACtC,iBAAiB,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACtC,OAAO,iBAAiB,CAAC;SAC5B;QAES,MAAM,eAAe,CAAC,SAAoB;YAChD,IAAI,CAAC,YAAY,CAAC,mBAAmB,IAAI,SAAS,KAAK,CAAC,MAAM,YAAY,CAAC,mBAAmB,EAAE,SAAS,EAAE;;gBAEvG,YAAY,CAAC,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,EAAE;qBACrD,IAAI,CACD,CAAC,WAAmC,KAAK,IAAI,WAAW,CAAC,SAAS,CAAC,EACnE,CAAC,CAAC;oBACE,YAAY,CAAC,mBAAmB,GAAG,IAAI,CAAC;oBACxC,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAC5B,CACJ,CAAC;aACT;YACD,OAAO,YAAY,CAAC,mBAAmB,CAAC;SAC3C;QAEO,MAAM,gBAAgB;YAC1B,IAAI;;;gBAGA,OAAO,CAAC,MAAM,OAAO,kCAAsC,CAAC,EAAE,OAAO,CAAC;aACzE;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,IAAI,UAAU,CAChB,SAAS,CAAC,2BAA2B,EACrC,gCAAgC,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,EAChD,IAAI,CACP,CAAC;aACL;SACJ;QAES,MAAM,UAAU;YACtB,IAAI;;gBAEA,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;oBAC9B,aAAa,EAAE;;oBAEf,qBAAqB,EAAE;iBAC1B,CAAC,CAAC;gBACH,OAAO,KAAK,CAAC;aAChB;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,IAAI,UAAU,CAChB,SAAS,CAAC,2BAA2B,EACrC,gCAAgC,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,EAChD,IAAI,CACP,CAAC;aACL;SACJ;;IAvFc,gCAAmB,GAAgC,IAAI,CAAC;IAwF3E,mBAAC;;;;;"}