{"version":3,"file":"lazy-chunk-request-get-address-and-public-key-bitcoin.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/bitcoin/request-get-address-and-public-key-bitcoin.ts"],"sourcesContent":["import RequestBitcoin from './request-bitcoin';\nimport { AddressTypeBitcoin, Coin, Network, RequestTypeBitcoin } from '../../constants';\nimport { parseBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype BtcAddressInfo = {\n    publicKey: string,\n    address: string,\n    chainCode: string,\n};\n\nexport default class RequestGetAddressAndPublicKeyBitcoin extends RequestBitcoin<BtcAddressInfo> {\n    public readonly type: RequestTypeBitcoin.GET_ADDRESS_AND_PUBLIC_KEY = RequestTypeBitcoin.GET_ADDRESS_AND_PUBLIC_KEY;\n    public readonly keyPath: string;\n    public readonly display?: boolean;\n    public readonly expectedAddress?: string;\n    public readonly network: Network;\n    private readonly _addressType: AddressTypeBitcoin;\n\n    constructor(keyPath: string, display?: boolean, expectedAddress?: string, expectedWalletId?: string) {\n        super(expectedWalletId);\n        this.keyPath = keyPath;\n        this.display = display;\n        this.expectedAddress = expectedAddress;\n\n        try {\n            const parsedKeyPath = parseBip32Path(keyPath);\n            if (parsedKeyPath.coin !== Coin.BITCOIN) throw new Error('Not a Bitcoin bip32 path following bip44');\n            this.network = parsedKeyPath.network;\n            this._addressType = parsedKeyPath.addressType;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.REQUEST_ASSERTION_FAILED,\n                `Invalid keyPath ${keyPath}: ${e.message || e}`,\n                this,\n            );\n        }\n    }\n\n    public async call(transport: Transport): Promise<BtcAddressInfo> {\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n\n        const format = {\n            [AddressTypeBitcoin.LEGACY]: 'legacy' as 'legacy',\n            [AddressTypeBitcoin.P2SH_SEGWIT]: 'p2sh' as 'p2sh',\n            [AddressTypeBitcoin.NATIVE_SEGWIT]: 'bech32' as 'bech32',\n        }[this._addressType] || 'bech32';\n\n        // TODO Requesting the pubic key causes a confirmation screen to be displayed on the Ledger for u2f and WebAuthn\n        //  if the user has this privacy feature enabled. Subsequent requests can provide a permission token to avoid\n        //  this screen (see https://github.com/LedgerHQ/app-bitcoin/blob/master/doc/btc.asc#get-wallet-public-key).\n        //  This token is however not supported in @ledgerhq/hw-app-btc lib and therefore has to be implemented by\n        //  ourselves.\n        const { bitcoinAddress: address, publicKey, chainCode } = await api.getWalletPublicKey(this.keyPath, {\n            verify: this.display,\n            format,\n        });\n\n        if (this.expectedAddress && this.expectedAddress !== address) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, 'Address mismatch', this);\n        }\n\n        return { address, publicKey, chainCode };\n    }\n}\n"],"names":[],"mappings":";;;;MAYqB,oCAAqC,SAAQ,cAA8B;IAQ5F,YAAY,OAAe,EAAE,OAAiB,EAAE,eAAwB,EAAE,gBAAyB;QAC/F,KAAK,CAAC,gBAAgB,CAAC,CAAC;QARZ,SAAI,GAAkD,kBAAkB,CAAC,0BAA0B,CAAC;QAShH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QAEvC,IAAI;YACA,MAAM,aAAa,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;YAC9C,IAAI,aAAa,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO;gBAAE,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YACrG,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;YACrC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,WAAW,CAAC;SACjD;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,UAAU,CAChB,SAAS,CAAC,wBAAwB,EAClC,mBAAmB,OAAO,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,EAC/C,IAAI,CACP,CAAC;SACL;KACJ;IAEM,MAAM,IAAI,CAAC,SAAoB;QAClC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAElD,MAAM,MAAM,GAAG;YACX,CAAC,kBAAkB,CAAC,MAAM,GAAG,QAAoB;YACjD,CAAC,kBAAkB,CAAC,WAAW,GAAG,MAAgB;YAClD,CAAC,kBAAkB,CAAC,aAAa,GAAG,QAAoB;SAC3D,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,QAAQ,CAAC;;;;;;QAOjC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE;YACjG,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,MAAM;SACT,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,KAAK,OAAO,EAAE;YAC1D,MAAM,IAAI,UAAU,CAAC,SAAS,CAAC,wBAAwB,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;SACtF;QAED,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;KAC5C;;;;;"}