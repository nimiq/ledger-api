{"version":3,"file":"lazy-chunk-request-derive-addresses-nimiq.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-derive-addresses-nimiq.ts"],"sourcesContent":["import RequestNimiq from './request-nimiq';\nimport { Coin, RequestTypeNimiq } from '../../constants';\nimport ErrorState, { ErrorType } from '../../error-state';\nimport { parseBip32Path } from '../../bip32-utils';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nexport default class RequestDeriveAddressesNimiq extends RequestNimiq<Array<{ address: string, keyPath: string }>> {\n    public readonly type: RequestTypeNimiq.DERIVE_ADDRESSES = RequestTypeNimiq.DERIVE_ADDRESSES;\n    public readonly pathsToDerive: Iterable<string>;\n\n    constructor(pathsToDerive: Iterable<string>, expectedWalletId?: string) {\n        super(expectedWalletId);\n        this.pathsToDerive = pathsToDerive;\n\n        for (const keyPath of pathsToDerive) {\n            try {\n                if (parseBip32Path(keyPath).coin !== Coin.NIMIQ) throw new Error('Not a Nimiq bip32 path');\n            } catch (e) {\n                throw new ErrorState(\n                    ErrorType.REQUEST_ASSERTION_FAILED,\n                    `Invalid keyPath ${keyPath}: ${e.message || e}`,\n                    this,\n                );\n            }\n        }\n    }\n\n    public async call(transport: Transport): Promise<Array<{ address: string, keyPath: string }>> {\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        const addressRecords = [];\n        for (const keyPath of this.pathsToDerive) {\n            if (this.cancelled) return addressRecords;\n            // eslint-disable-next-line no-await-in-loop\n            const { address } = await api.getAddress(\n                keyPath,\n                true, // validate\n                false, // display\n            );\n            addressRecords.push({ address, keyPath });\n        }\n        return addressRecords;\n    }\n}\n"],"names":[],"mappings":";;;;MAOqB,2BAA4B,SAAQ,YAAyD;IAI9G,YAAY,aAA+B,EAAE,gBAAyB;QAClE,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAJZ,SAAI,GAAsC,gBAAgB,CAAC,gBAAgB,CAAC;QAKxF,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE;YACjC,IAAI;gBACA,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK;oBAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC9F;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,IAAI,UAAU,CAChB,SAAS,CAAC,wBAAwB,EAClC,mBAAmB,OAAO,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,EAC/C,IAAI,CACP,CAAC;aACL;SACJ;KACJ;IAEM,MAAM,IAAI,CAAC,SAAoB;QAClC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAClD,MAAM,cAAc,GAAG,EAAE,CAAC;QAC1B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,aAAa,EAAE;YACtC,IAAI,IAAI,CAAC,SAAS;gBAAE,OAAO,cAAc,CAAC;;YAE1C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,GAAG,CAAC,UAAU,CACpC,OAAO,EACP,IAAI;YACJ,KAAK,CACR,CAAC;YACF,cAAc,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;SAC7C;QACD,OAAO,cAAc,CAAC;KACzB;;;;;"}