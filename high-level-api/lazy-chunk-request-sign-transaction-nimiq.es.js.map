{"version":3,"file":"lazy-chunk-request-sign-transaction-nimiq.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-sign-transaction-nimiq.ts"],"sourcesContent":["import RequestWithKeyPathNimiq from './request-with-key-path-nimiq';\nimport { RequestTypeNimiq } from '../../constants';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype Address = import('@nimiq/core-web').Address;\ntype AccountType = import('@nimiq/core-web').Account.Type;\ntype Transaction = import('@nimiq/core-web').Transaction;\ntype PublicKey = import('@nimiq/core-web').PublicKey;\n\nexport interface TransactionInfoNimiq {\n    sender: Address;\n    senderType?: AccountType;\n    recipient: Address;\n    recipientType?: AccountType;\n    value: number; // In Luna\n    fee?: number;\n    validityStartHeight: number;\n    network?: 'main' | 'test' | 'dev';\n    flags?: number;\n    extraData?: Uint8Array;\n}\n\nexport default class RequestSignTransactionNimiq extends RequestWithKeyPathNimiq<Transaction> {\n    public readonly type: RequestTypeNimiq.SIGN_TRANSACTION;\n    public readonly transaction: TransactionInfoNimiq;\n\n    constructor(keyPath: string, transaction: TransactionInfoNimiq, expectedWalletId?: string) {\n        const type = RequestTypeNimiq.SIGN_TRANSACTION;\n        super(keyPath, expectedWalletId, { type });\n        this.type = type;\n        this.transaction = transaction;\n\n        // Preload Nimiq lib. Ledger Nimiq api is already preloaded by parent class. Ignore errors.\n        this._loadNimiq().catch(() => {});\n    }\n\n    public async call(transport: Transport): Promise<Transaction> {\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        // Note: We make api calls outside of try...catch blocks to let the exceptions fall through such that\n        // _callLedger can decide how to behave depending on the api error. All other errors are converted to\n        // REQUEST_ASSERTION_FAILED errors which stop the execution of the request.\n        const { publicKey: signerPubKeyBytes } = await api.getPublicKey(\n            this.keyPath,\n            true, // validate\n            false, // display\n        );\n\n        const Nimiq = await this._loadNimiq(); // throws LOADING_DEPENDENCIES_FAILED on failure\n\n        let nimiqTx: Transaction;\n        let signerPubKey: PublicKey;\n        try {\n            const tx = this.transaction;\n            signerPubKey = new Nimiq.PublicKey(signerPubKeyBytes);\n\n            const senderType = tx.senderType !== undefined && tx.senderType !== null\n                ? tx.senderType\n                : Nimiq.Account.Type.BASIC;\n\n            const recipientType = tx.recipientType !== undefined && tx.recipientType !== null\n                ? tx.recipientType\n                : Nimiq.Account.Type.BASIC;\n\n            let { network } = tx;\n            if (!network) {\n                try {\n                    network = Nimiq.GenesisConfig.NETWORK_NAME as 'main' | 'test' | 'dev';\n                } catch (e) {\n                    // Genesis config not initialized\n                    network = 'main';\n                }\n            }\n\n            const genesisConfig = Nimiq.GenesisConfig.CONFIGS[network];\n            const networkId = genesisConfig.NETWORK_ID;\n\n            const flags = tx.flags !== undefined && tx.flags !== null\n                ? tx.flags\n                : Nimiq.Transaction.Flag.NONE;\n            const fee = tx.fee || 0;\n\n            if ((tx.extraData && tx.extraData.length !== 0)\n                || senderType !== Nimiq.Account.Type.BASIC\n                || recipientType !== Nimiq.Account.Type.BASIC\n                || flags !== Nimiq.Transaction.Flag.NONE\n            ) {\n                const extraData = tx.extraData ? tx.extraData : new Uint8Array(0);\n                nimiqTx = new Nimiq.ExtendedTransaction(tx.sender, senderType, tx.recipient,\n                    recipientType, tx.value, fee, tx.validityStartHeight, flags, extraData,\n                    /* proof */ undefined, networkId);\n            } else {\n                nimiqTx = new Nimiq.BasicTransaction(signerPubKey, tx.recipient, tx.value,\n                    fee, tx.validityStartHeight, /* signature */ undefined, networkId);\n            }\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e, this);\n        }\n\n        const { signature: signatureBytes } = await api.signTransaction(\n            this.keyPath,\n            nimiqTx.serializeContent(),\n        );\n\n        try {\n            const signature = new Nimiq.Signature(signatureBytes);\n\n            if (nimiqTx instanceof Nimiq.BasicTransaction) {\n                nimiqTx.signature = signature;\n            } else {\n                nimiqTx.proof = Nimiq.SignatureProof.singleSig(signerPubKey!, signature).serialize();\n            }\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e, this);\n        }\n\n        return nimiqTx;\n    }\n}\n"],"names":[],"mappings":"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"}