{"version":3,"file":"lazy-chunk-request-with-key-path-nimiq.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-with-key-path-nimiq.ts"],"sourcesContent":["import RequestNimiq from './request-nimiq';\nimport { Coin } from '../../constants';\nimport { parseBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\n\nexport default abstract class RequestWithKeyPathNimiq<T> extends RequestNimiq<T> {\n    public readonly keyPath: string;\n\n    protected constructor(keyPath: string, expectedWalletId?: string, childClassProperties: Object = {}) {\n        super(expectedWalletId);\n\n        this.keyPath = keyPath;\n        try {\n            if (parseBip32Path(keyPath).coin !== Coin.NIMIQ) throw new Error('Not a Nimiq bip32 path');\n        } catch (e) {\n            // Set properties of child class such that these are present on the request in the thrown error state.\n            for (const [key, value] of Object.entries(childClassProperties)) {\n                (this as any)[key] = value;\n            }\n            throw new ErrorState(\n                ErrorType.REQUEST_ASSERTION_FAILED,\n                `Invalid keyPath ${keyPath}: ${e.message || e}`,\n                this,\n            );\n        }\n    }\n}\n"],"names":[],"mappings":";;;MAK8B,uBAA2B,SAAQ,YAAe;IAG5E,YAAsB,OAAe,EAAE,gBAAyB,EAAE,uBAA+B,EAAE;QAC/F,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAExB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI;YACA,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK;gBAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC9F;QAAC,OAAO,CAAC,EAAE;;YAER,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE;gBAC5D,IAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aAC9B;YACD,MAAM,IAAI,UAAU,CAChB,SAAS,CAAC,wBAAwB,EAClC,mBAAmB,OAAO,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,EAC/C,IAAI,CACP,CAAC;SACL;KACJ;;;;;"}