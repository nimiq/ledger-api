{"version":3,"file":"lazy-chunk-request-bitcoin.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/bitcoin/request-bitcoin.ts"],"sourcesContent":["import Request, { CoinAppConnection } from '../request';\nimport { AddressTypeBitcoin, Coin, Network, RequestTypeBitcoin } from '../../constants';\nimport { getBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype LowLevelApiConstructor = typeof import('@ledgerhq/hw-app-btc').default;\ntype LowLevelApi = InstanceType<LowLevelApiConstructor>;\ntype BitcoinLib = typeof import('./bitcoin-lib');\n\nexport { RequestTypeBitcoin };\n\nexport default abstract class RequestBitcoin<T> extends Request<T> {\n    private static _lowLevelApiPromise: Promise<LowLevelApi> | null = null;\n\n    public readonly coin: Coin.BITCOIN = Coin.BITCOIN;\n    public readonly minRequiredAppVersion: string = '1.3.8'; // first version supporting web usb\n    public readonly abstract network: Network;\n\n    public get requiredApp(): string {\n        // Note that Ledger provides a separate Bitcoin testnet app which can be installed by enabling developer mode in\n        // Ledger Live. Operating on testnet paths is generally allowed also for the Bitcoin mainnet app and retrieved\n        // public keys (and thus also computed extended keys) and signed transactions are identical to the testnet app,\n        // however addresses displayed or generated by the Ledger are in mainnet format, regardless of whether a testnet\n        // path is specified. The testnet app since version 1.4.6 shows a warning when accessing mainnet paths. For\n        // these reason we generally block using the Bitcoin mainnet and testnet apps interchangeably.\n        return `Bitcoin${this.network === Network.TESTNET ? ' Test' : ''}`;\n    }\n\n    protected constructor(expectedWalletId?: string) {\n        super(expectedWalletId);\n\n        // Preload dependencies. Bitcoin lib is preloaded individually by request child classes that need it.\n        // Ignore errors.\n        Promise.all([\n            this._loadLowLevelApi(), // needed by all requests\n            this._isWalletIdDerivationRequired ? import('sha.js/sha256') : null,\n        ]).catch(() => {});\n    }\n\n    public async checkCoinAppConnection(transport: Transport): Promise<CoinAppConnection> {\n        const coinAppConnection = await super.checkCoinAppConnection(transport, 'BTC');\n        if (!this._isWalletIdDerivationRequired) return coinAppConnection; // skip wallet id derivation\n\n        // Note that api and sha256 are preloaded in the constructor, therefore we don't need to optimize for load order\n        // or execution order here.\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        // TODO For u2f and WebAuthn, the Ledger displays a confirmation screen to get the public key if the user has\n        //  this privacy setting enabled. The get public key functionality also supports setting a permission token\n        //  which however is not implemented in @ledgerhq/hw-app-btc and therefore would need to be implemented manually\n        const { publicKey } = await api.getWalletPublicKey(getBip32Path({\n            coin: Coin.BITCOIN,\n            addressType: AddressTypeBitcoin.LEGACY,\n            network: this.network,\n            accountIndex: 0,\n            addressIndex: 0,\n            isInternal: false,\n        }));\n\n        let Sha256: typeof import('sha.js/sha256').default;\n        try {\n            // Note that loading sha here only for wallet id calculation is not really wasteful as it's also imported\n            // by the ledger api and bitcoinjs.\n            Sha256 = (await import('sha.js/sha256')).default;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e.message || e}`,\n                this,\n            );\n        }\n\n        const walletId = new Sha256().update(publicKey, 'hex').digest('base64');\n        this._checkExpectedWalletId(walletId);\n        coinAppConnection.walletId = walletId;\n        return coinAppConnection;\n    }\n\n    protected async _getLowLevelApi(transport: Transport): Promise<LowLevelApi> {\n        if (!RequestBitcoin._lowLevelApiPromise\n            || transport !== (await RequestBitcoin._lowLevelApiPromise as any).transport) {\n            // No low level api instantiated yet or transport / transport type changed in the meantime.\n            // Note that property transport exists on AppBtc but is not defined in the types. Unfortunately we can't\n            // use type augmentation as it's the default export and therefore we cast to any.\n            RequestBitcoin._lowLevelApiPromise = this._loadLowLevelApi()\n                .then(\n                    (LowLevelApi: LowLevelApiConstructor) => new LowLevelApi(transport),\n                    (e) => {\n                        RequestBitcoin._lowLevelApiPromise = null;\n                        return Promise.reject(e);\n                    },\n                );\n        }\n        return RequestBitcoin._lowLevelApiPromise;\n    }\n\n    private async _loadLowLevelApi(): Promise<LowLevelApiConstructor> {\n        try {\n            return (await import('@ledgerhq/hw-app-btc')).default;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e.message || e}`,\n                this,\n            );\n        }\n    }\n\n    protected async _loadBitcoinLib(): Promise<BitcoinLib> {\n        try {\n            return await import('./bitcoin-lib');\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e.message || e}`,\n                this,\n            );\n        }\n    }\n}\n"],"names":[],"mappings":"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"}