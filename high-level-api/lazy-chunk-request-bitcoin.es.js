import { Coin, Network, getBip32Path, AddressTypeBitcoin, ErrorState, ErrorType } from './ledger-api.es.js';
import { R as Request } from './lazy-chunk-request.es.js';

let RequestBitcoin = /** @class */ (() => {
    class RequestBitcoin extends Request {
        constructor(expectedWalletId) {
            super(expectedWalletId);
            this.coin = Coin.BITCOIN;
            this.minRequiredAppVersion = '1.3.8'; // first version supporting web usb
            // Preload dependencies. Bitcoin lib is preloaded individually by request child classes that need it.
            // Ignore errors.
            Promise.all([
                this._loadLowLevelApi(),
                this._isWalletIdDerivationRequired ? [import('./lazy-chunk-buffer-es6.es.js'), import('./lazy-chunk-_commonjsHelpers.es.js'), import('./lazy-chunk-sha256.es.js')][2].then(function (n) { return n.b; }) : null,
            ]).catch(() => { });
        }
        get requiredApp() {
            // Note that Ledger provides a separate Bitcoin testnet app which can be installed by enabling developer mode in
            // Ledger Live. Operating on testnet paths is generally allowed also for the Bitcoin mainnet app and retrieved
            // public keys (and thus also computed extended keys) and signed transactions are identical to the testnet app,
            // however addresses displayed or generated by the Ledger are in mainnet format, regardless of whether a testnet
            // path is specified. The testnet app since version 1.4.6 shows a warning when accessing mainnet paths. For
            // these reason we generally block using the Bitcoin mainnet and testnet apps interchangeably.
            return `Bitcoin${this.network === Network.TESTNET ? ' Test' : ''}`;
        }
        async checkCoinAppConnection(transport) {
            const coinAppConnection = await super.checkCoinAppConnection(transport, 'BTC');
            if (!this._isWalletIdDerivationRequired)
                return coinAppConnection; // skip wallet id derivation
            // Note that api and sha256 are preloaded in the constructor, therefore we don't need to optimize for load order
            // or execution order here.
            const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure
            // TODO For u2f and WebAuthn, the Ledger displays a confirmation screen to get the public key if the user has
            //  this privacy setting enabled. The get public key functionality also supports setting a permission token
            //  which however is not implemented in @ledgerhq/hw-app-btc and therefore would need to be implemented manually
            const { publicKey } = await api.getWalletPublicKey(getBip32Path({
                coin: Coin.BITCOIN,
                addressType: AddressTypeBitcoin.LEGACY,
                network: this.network,
                accountIndex: 0,
                addressIndex: 0,
                isInternal: false,
            }));
            let Sha256;
            try {
                // Note that loading sha here only for wallet id calculation is not really wasteful as it's also imported
                // by the ledger api and bitcoinjs.
                Sha256 = (await [import('./lazy-chunk-buffer-es6.es.js'), import('./lazy-chunk-_commonjsHelpers.es.js'), import('./lazy-chunk-sha256.es.js')][2].then(function (n) { return n.b; })).default;
            }
            catch (e) {
                throw new ErrorState(ErrorType.LOADING_DEPENDENCIES_FAILED, `Failed loading dependencies: ${e.message || e}`, this);
            }
            const walletId = new Sha256().update(publicKey, 'hex').digest('base64');
            this._checkExpectedWalletId(walletId);
            coinAppConnection.walletId = walletId;
            return coinAppConnection;
        }
        async _getLowLevelApi(transport) {
            if (!RequestBitcoin._lowLevelApiPromise
                || transport !== (await RequestBitcoin._lowLevelApiPromise).transport) {
                // No low level api instantiated yet or transport / transport type changed in the meantime.
                // Note that property transport exists on AppBtc but is not defined in the types. Unfortunately we can't
                // use type augmentation as it's the default export and therefore we cast to any.
                RequestBitcoin._lowLevelApiPromise = this._loadLowLevelApi()
                    .then((LowLevelApi) => new LowLevelApi(transport), (e) => {
                    RequestBitcoin._lowLevelApiPromise = null;
                    return Promise.reject(e);
                });
            }
            return RequestBitcoin._lowLevelApiPromise;
        }
        async _loadLowLevelApi() {
            try {
                return (await [import('./lazy-chunk-buffer-es6.es.js'), import('./lazy-chunk-events.es.js'), import('./lazy-chunk-index.es.js'), import('./lazy-chunk-_commonjsHelpers.es.js'), import('./lazy-chunk-sha256.es.js'), import('./lazy-chunk-index.es3.js'), import('./lazy-chunk-Btc.es.js')][6]).default;
            }
            catch (e) {
                throw new ErrorState(ErrorType.LOADING_DEPENDENCIES_FAILED, `Failed loading dependencies: ${e.message || e}`, this);
            }
        }
        async _loadBitcoinLib() {
            try {
                return await [import('./lazy-chunk-buffer-es6.es.js'), import('./lazy-chunk-events.es.js'), import('./lazy-chunk-_commonjsHelpers.es.js'), import('./lazy-chunk-sha256.es.js'), import('./lazy-chunk-index.es3.js'), import('./lazy-chunk-bitcoin-lib.es.js')][5];
            }
            catch (e) {
                throw new ErrorState(ErrorType.LOADING_DEPENDENCIES_FAILED, `Failed loading dependencies: ${e.message || e}`, this);
            }
        }
    }
    RequestBitcoin._lowLevelApiPromise = null;
    return RequestBitcoin;
})();

export { RequestBitcoin as R };
//# sourceMappingURL=lazy-chunk-request-bitcoin.es.js.map
