{"version":3,"file":"lazy-chunk-request-sign-message-nimiq.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-sign-message-nimiq.ts"],"sourcesContent":["import RequestWithKeyPathNimiq from './request-with-key-path-nimiq';\nimport { RequestTypeNimiq } from '../../constants';\nimport ErrorState, { ErrorType } from '../../error-state';\nimport { NimiqVersion } from '../../../lib/constants';\nimport { isNimiqLegacy, NimiqPrimitive } from '../../../lib/load-nimiq';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\nexport type MessageSignatureInfoNimiq<Version extends NimiqVersion> = {\n    signer: NimiqPrimitive<'PublicKey', Version>,\n    signature: NimiqPrimitive<'Signature', Version>,\n};\n\nexport default class RequestSignMessageNimiq<Version extends NimiqVersion>\n    extends RequestWithKeyPathNimiq<Version, MessageSignatureInfoNimiq<Version>> {\n    public readonly type: RequestTypeNimiq.SIGN_MESSAGE;\n    public readonly message: string | Uint8Array; // utf8 string or Uint8Array of arbitrary data\n    public readonly flags?: number | {\n        preferDisplayTypeHex: boolean, // first choice, if multiple flags are set\n        preferDisplayTypeHash: boolean, // second choice, if multiple flags are set\n    };\n\n    public get minRequiredAppVersion(): string {\n        return '2.0'; // first version supporting message signing\n    }\n\n    constructor(\n        nimiqVersion: Version,\n        keyPath: string,\n        message: string | Uint8Array,\n        flags?: RequestSignMessageNimiq<Version>['flags'],\n        expectedWalletId?: string,\n    ) {\n        const type = RequestTypeNimiq.SIGN_MESSAGE;\n        super(nimiqVersion, keyPath, expectedWalletId, { type, message, flags });\n        this.type = type;\n        this.message = message;\n        this.flags = flags;\n\n        // Preload Nimiq lib. Ledger Nimiq api is already preloaded by parent class. Ignore errors.\n        this._loadNimiq().catch(() => {});\n    }\n\n    public async call(transport: Transport): Promise<MessageSignatureInfoNimiq<Version>> {\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n\n        let messageBuffer: Buffer;\n        try {\n            messageBuffer = typeof this.message === 'string'\n                ? Buffer.from(this.message, 'utf8') // throws if invalid utf8\n                : Buffer.from(this.message);\n\n            if (messageBuffer.length >= 2 ** 32) {\n                // the message length must fit an uint32\n                throw new Error('Message too long');\n            }\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e instanceof Error ? e : String(e), this);\n        }\n\n        const { publicKey } = await api.getPublicKey(\n            this.keyPath,\n            true, // validate\n            false, // display\n            this.nimiqVersion,\n        );\n        const { signature } = await api.signMessage(\n            this.keyPath,\n            messageBuffer,\n            this.flags,\n        );\n\n        const Nimiq = await this._loadNimiq(); // throws LOADING_DEPENDENCIES_FAILED on failure; preload in constructor\n\n        return {\n            signer: new Nimiq.PublicKey(publicKey),\n            signature: isNimiqLegacy(Nimiq) ? new Nimiq.Signature(signature) : Nimiq.Signature.deserialize(signature),\n        } as MessageSignatureInfoNimiq<Version>;\n    }\n}\n"],"names":["Buffer"],"mappings":";;;;;;AAYqB,MAAA,uBACjB,SAAQ,uBAAoE,CAAA;AAC5D,IAAA,IAAI,CAAgC;IACpC,OAAO,CAAsB;AAC7B,IAAA,KAAK,CAGnB;AAEF,IAAA,IAAW,qBAAqB,GAAA;QAC5B,OAAO,KAAK,CAAC;KAChB;IAED,WACI,CAAA,YAAqB,EACrB,OAAe,EACf,OAA4B,EAC5B,KAAiD,EACjD,gBAAyB,EAAA;AAEzB,QAAA,MAAM,IAAI,GAAG,gBAAgB,CAAC,YAAY,CAAC;AAC3C,QAAA,KAAK,CAAC,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AACzE,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;QAGnB,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,MAAK,GAAG,CAAC,CAAC;KACrC;IAEM,MAAM,IAAI,CAAC,SAAoB,EAAA;QAClC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AAElD,QAAA,IAAI,aAAqB,CAAC;QAC1B,IAAI;AACA,YAAA,aAAa,GAAG,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ;AAC5C,kBAAEA,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;kBACjCA,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAEhC,YAAA,IAAI,aAAa,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE;;AAEjC,gBAAA,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACvC,aAAA;AACJ,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,UAAU,CAAC,SAAS,CAAC,wBAAwB,EAAE,CAAC,YAAY,KAAK,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AACtG,SAAA;AAED,QAAA,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,GAAG,CAAC,YAAY,CACxC,IAAI,CAAC,OAAO,EACZ,IAAI;AACJ,QAAA,KAAK;QACL,IAAI,CAAC,YAAY,CACpB,CAAC;AACF,QAAA,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,GAAG,CAAC,WAAW,CACvC,IAAI,CAAC,OAAO,EACZ,aAAa,EACb,IAAI,CAAC,KAAK,CACb,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAEtC,OAAO;AACH,YAAA,MAAM,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;YACtC,SAAS,EAAE,aAAa,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC;SACtE,CAAC;KAC3C;AACJ;;;;"}