{"version":3,"file":"lazy-chunk-request-sign-message-bitcoin.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/bitcoin/request-sign-message-bitcoin.ts"],"sourcesContent":["import RequestBitcoin from './request-bitcoin';\nimport { AddressTypeBitcoin, Coin, LedgerAddressFormatMapBitcoin, Network, RequestTypeBitcoin } from '../../constants';\nimport { parseBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype MessageSignatureInfo = {\n    signerAddress: string,\n    signature: string,\n};\n\nexport default class RequestSignMessageBitcoin extends RequestBitcoin<MessageSignatureInfo> {\n    public readonly type: RequestTypeBitcoin.SIGN_MESSAGE = RequestTypeBitcoin.SIGN_MESSAGE;\n    public readonly keyPath: string;\n    public readonly message: string | Uint8Array; // utf8 string or Uint8Array of arbitrary data\n    public readonly network: Exclude<Network, Network.DEVNET>;\n    private readonly _addressType: AddressTypeBitcoin;\n\n    constructor(keyPath: string, message: string | Uint8Array, expectedWalletId?: string) {\n        super(expectedWalletId);\n        this.keyPath = keyPath;\n        this.message = message;\n\n        try {\n            const parsedKeyPath = parseBip32Path(keyPath);\n            if (parsedKeyPath.coin !== Coin.BITCOIN) throw new Error('Not a Bitcoin bip32 path following bip44');\n            this.network = parsedKeyPath.network;\n            this._addressType = parsedKeyPath.addressType;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.REQUEST_ASSERTION_FAILED,\n                `Invalid keyPath ${keyPath}: ${e instanceof Error ? e.message : e}`,\n                this,\n            );\n        }\n    }\n\n    public async call(transport: Transport): Promise<MessageSignatureInfo> {\n        // Resources:\n        // - Message signature specification (bip137):\n        //   https://github.com/bitcoin/bips/blob/master/bip-0137.mediawiki\n        //   Note that the message signatures generated by the Ledger are not based on the newer bip322 yet.\n        // - Description of v, r, s values the signature consists of:\n        //   https://bitcoin.stackexchange.com/a/38909\n        // - Ledger Bitcoin App's api description:\n        //   Old app <2.0: https://github.com/LedgerHQ/app-bitcoin/blob/master/doc/btc.asc#sign-message\n        //   New app >=2.0: https://github.com/LedgerHQ/app-bitcoin-new/blob/master/doc/bitcoin.md#sign_message\n        // - The implementation of the api call in @ledgerhq/hw-app-btc:\n        //   https://github.com/LedgerHQ/ledger-live/blob/develop/libs/ledgerjs/packages/hw-app-btc/src/signMessage.ts\n        //   Also handles the conversion of the ASN-1 encoded signature created by the Ledger (defined in\n        //   https://www.secg.org/sec1-v2.pdf) to BitcoinQT format. However note that the returned v value does not\n        //   contain the address type constant yet. For converting this result to the final concatenated base64\n        //   signature including the address type see the jsdoc documentation of signMessage here:\n        //   https://github.com/LedgerHQ/ledger-live/blob/main/libs/ledgerjs/packages/hw-app-btc/src/Btc.ts\n        //   For new apps >=2.0 message signing is implemented here:\n        //   github.com/LedgerHQ/ledger-live/blob/develop/libs/ledgerjs/packages/hw-app-btc/src/newops/appClient.ts#L174\n        //   or alternatively here in the all-new ts client for app-bitcoin-new:\n        //   https://github.com/LedgerHQ/app-bitcoin-new/blob/develop/bitcoin_client_js/src/lib/appClient.ts\n        // - For confirming signed messages online:\n        //   https://www.verifybitcoinmessage.com/\n        // - bitcoinjs-message library for client side signing and verification of message signatures:\n        //   https://github.com/bitcoinjs/bitcoinjs-message\n\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n\n        let messageBuffer: Buffer;\n        try {\n            messageBuffer = typeof this.message === 'string'\n                ? Buffer.from(this.message, 'utf8') // throws if invalid utf8\n                : Buffer.from(this.message);\n\n            if (messageBuffer.length >= 2 ** 16) {\n                // the message length is encoded in an uint16.\n                throw new Error('Message too long');\n            }\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e instanceof Error ? e : String(e), this);\n        }\n\n        if (this.network === Network.TESTNET && this._addressType === AddressTypeBitcoin.LEGACY) {\n            console.warn('Ledgers seem to generate invalid signatures for testnet legacy p2pkh addresses. '\n                + 'Prefer using nested p2sh segwit or native bech32 segwit addresses.');\n        }\n\n        // Note: We make api calls outside of the try...catch block to let the exceptions fall through such that\n        // _callLedger can decide how to behave depending on the api error.\n        const { bitcoinAddress: signerAddress } = await api.getWalletPublicKey(\n            this.keyPath,\n            { format: LedgerAddressFormatMapBitcoin[this._addressType] },\n        );\n\n        const {\n            v, // recId (not including the address type constant)\n            r, // r of ECDSA signature\n            s, // s of ECDSA signature\n        } = await api.signMessage(this.keyPath, messageBuffer.toString('hex'));\n\n        // Create the signature header, see\n        // https://github.com/bitcoin/bips/blob/master/bip-0137.mediawiki#procedure-for-signingverifying-a-signature\n        const headerAddressTypeConstant = {\n            [AddressTypeBitcoin.LEGACY]: 31, // compressed p2pkh as the api returns addresses for compressed pub keys\n            [AddressTypeBitcoin.P2SH_SEGWIT]: 35,\n            [AddressTypeBitcoin.NATIVE_SEGWIT]: 39,\n        }[this._addressType];\n        const header = (v + headerAddressTypeConstant).toString(16);\n\n        const signature = Buffer.from(`${header}${r}${s}`, 'hex').toString('base64');\n\n        return {\n            signerAddress,\n            signature,\n        };\n    }\n}\n"],"names":["Buffer"],"mappings":"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"}