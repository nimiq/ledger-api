{"version":3,"file":"lazy-chunk-request-derive-addresses-nimiq.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-derive-addresses-nimiq.ts"],"sourcesContent":["import RequestNimiq from './request-nimiq';\nimport { Coin, RequestTypeNimiq } from '../../constants';\nimport ErrorState, { ErrorType } from '../../error-state';\nimport { parseBip32Path } from '../../bip32-utils';\nimport { NimiqVersion } from '../../../lib/constants';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nexport default class RequestDeriveAddressesNimiq\n    extends RequestNimiq<NimiqVersion, Array<{ address: string, keyPath: string }>> {\n    public readonly type: RequestTypeNimiq.DERIVE_ADDRESSES = RequestTypeNimiq.DERIVE_ADDRESSES;\n    public readonly pathsToDerive: Iterable<string>;\n\n    constructor(nimiqVersion: NimiqVersion, pathsToDerive: Iterable<string>, expectedWalletId?: string) {\n        super(nimiqVersion, expectedWalletId);\n        this.pathsToDerive = pathsToDerive;\n\n        for (const keyPath of pathsToDerive) {\n            try {\n                if (parseBip32Path(keyPath).coin !== Coin.NIMIQ) throw new Error('Not a Nimiq bip32 path');\n            } catch (e) {\n                throw new ErrorState(\n                    ErrorType.REQUEST_ASSERTION_FAILED,\n                    `Invalid keyPath ${keyPath}: ${e instanceof Error ? e.message : e}`,\n                    this,\n                );\n            }\n        }\n    }\n\n    public async call(transport: Transport): Promise<Array<{ address: string, keyPath: string }>> {\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        const addressRecords = [];\n        for (const keyPath of this.pathsToDerive) {\n            if (this.cancelled) return addressRecords;\n            // eslint-disable-next-line no-await-in-loop\n            const { address } = await api.getAddress(\n                keyPath,\n                true, // validate\n                false, // display\n                this.nimiqVersion,\n            );\n            addressRecords.push({ address, keyPath });\n        }\n        return addressRecords;\n    }\n}\n"],"names":[],"mappings":";;;;AAQqB,MAAA,2BACjB,SAAQ,YAAuE,CAAA;AAC/D,IAAA,IAAI,GAAsC,gBAAgB,CAAC,gBAAgB,CAAC;AAC5E,IAAA,aAAa,CAAmB;AAEhD,IAAA,WAAA,CAAY,YAA0B,EAAE,aAA+B,EAAE,gBAAyB,EAAA;AAC9F,QAAA,KAAK,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;AACtC,QAAA,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;AAEnC,QAAA,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE;YACjC,IAAI;gBACA,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK;AAAE,oBAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;AAC9F,aAAA;AAAC,YAAA,OAAO,CAAC,EAAE;gBACR,MAAM,IAAI,UAAU,CAChB,SAAS,CAAC,wBAAwB,EAClC,CAAmB,gBAAA,EAAA,OAAO,CAAK,EAAA,EAAA,CAAC,YAAY,KAAK,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,CAAE,CAAA,EACnE,IAAI,CACP,CAAC;AACL,aAAA;AACJ,SAAA;KACJ;IAEM,MAAM,IAAI,CAAC,SAAoB,EAAA;QAClC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAClD,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,QAAA,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,aAAa,EAAE;YACtC,IAAI,IAAI,CAAC,SAAS;AAAE,gBAAA,OAAO,cAAc,CAAC;;AAE1C,YAAA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,GAAG,CAAC,UAAU,CACpC,OAAO,EACP,IAAI;AACJ,YAAA,KAAK;YACL,IAAI,CAAC,YAAY,CACpB,CAAC;YACF,cAAc,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;AAC7C,SAAA;AACD,QAAA,OAAO,cAAc,CAAC;KACzB;AACJ;;;;"}