{"version":3,"file":"lazy-chunk-request-bitcoin.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/bitcoin/request-bitcoin.ts"],"sourcesContent":["/// <reference path=\"../../../lib/type-shims.d.ts\" />\n\nimport Request, { CoinAppConnection } from '../request';\nimport { AddressTypeBitcoin, Coin, Network, RequestTypeBitcoin } from '../../constants';\nimport { isAppVersionSupported, isLegacyApp } from '../../app-utils';\nimport { getBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype LowLevelApiConstructor = typeof import('@ledgerhq/hw-app-btc').default;\ntype LowLevelApi = InstanceType<LowLevelApiConstructor>;\ntype BitcoinLib = typeof import('./bitcoin-lib');\ntype Sha256 = typeof import('sha.js/sha256').default;\n\nexport { RequestTypeBitcoin };\n\nexport default abstract class RequestBitcoin<T> extends Request<T> {\n    protected static _isNewApiSupported(app: string, appVersion: string): boolean {\n        // The Bitcoin app includes a new api starting with 2.0 which is mandatory since 2.1. Versions since 2.0 and\n        // before 2.1 implement both, the old and the new api.\n        return isAppVersionSupported(appVersion, '2')\n            // \"Bitcoin Legacy\" and \"Bitcoin Test Legacy\" apps available in Ledger Live implement the old api,\n            // regardless of the app version.\n            && !isLegacyApp(app);\n    }\n\n    private static _lowLevelApiPromise: Promise<LowLevelApi> | null = null;\n\n    public readonly coin: Coin.BITCOIN = Coin.BITCOIN;\n    public readonly minRequiredAppVersion: string = '1.3.8'; // first version supporting web usb\n    public readonly abstract network: Exclude<Network, Network.DEVNET>;\n\n    public get requiredApp(): string {\n        // Note that Ledger provides a separate Bitcoin testnet app which can be installed by enabling developer mode in\n        // Ledger Live. Operating on testnet paths is generally not allowed for the Bitcoin mainnet app, and vice versa\n        // since app version 2.0. Previously, it was allowed but already since version 1.4.6 a warning was shown. For\n        // these reason we generally block using the Bitcoin mainnet and testnet apps interchangeably.\n        return `Bitcoin${this.network === Network.TESTNET ? ' Test' : ''}`;\n    }\n\n    public get allowLegacyApp(): boolean {\n        return true;\n    }\n\n    protected constructor(expectedWalletId?: string) {\n        super(expectedWalletId);\n\n        // Preload dependencies. Bitcoin lib is preloaded individually by request child classes that need it.\n        // Ignore errors.\n        Promise.all([\n            this._loadLowLevelApi(), // needed by all requests\n            this._isWalletIdDerivationRequired ? this._loadSha256() : null,\n        ]).catch(() => {});\n    }\n\n    public async checkCoinAppConnection(transport: Transport): Promise<CoinAppConnection> {\n        const coinAppConnection = await super.checkCoinAppConnection(transport, 'BTC');\n        if (!this._isWalletIdDerivationRequired) return coinAppConnection; // skip wallet id derivation\n\n        // Note that api and Sha256 are preloaded in the constructor, therefore we don't need to optimize for load order\n        // or execution order here.\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        // TODO For u2f and WebAuthn, the Ledger displays a confirmation screen to get the public key if the user has\n        //  this privacy setting enabled. The get public key functionality also supports setting a permission token\n        //  which however is not implemented in @ledgerhq/hw-app-btc and therefore would need to be implemented manually\n        const { publicKey } = await api.getWalletPublicKey(getBip32Path({\n            coin: Coin.BITCOIN,\n            addressType: AddressTypeBitcoin.LEGACY,\n            network: this.network,\n            accountIndex: 0,\n            addressIndex: 0,\n            isInternal: false,\n        }));\n\n        // Note that loading sha.js here only for wallet id calculation is not really wasteful as it's also imported by\n        // @ledgerhq/hw-app-bitcoin and bitcoinjs-lib via create-hash anyway.\n        const Sha256 = await this._loadSha256();\n        const walletId = new Sha256().update(publicKey, 'hex').digest('base64');\n        coinAppConnection.walletId = walletId; // change the original object which equals _coinAppConnection\n        this._checkExpectedWalletId(walletId);\n        return coinAppConnection;\n    }\n\n    protected async _getLowLevelApi(transport: Transport): Promise<LowLevelApi> {\n        if (!RequestBitcoin._lowLevelApiPromise\n            // @ts-expect-error _transport is private\n            || transport !== (await RequestBitcoin._lowLevelApiPromise)._transport) {\n            // No low level api instantiated yet or transport / transport type changed in the meantime.\n            // Note that we don't need to check for a change of the connected Bitcoin app version as changing the app\n            // or app version requires closing the app which triggers a transport change, see transport-comparison.md.\n            const { app, appVersion } = this._coinAppConnection!;\n            const apiToUse = RequestBitcoin._isNewApiSupported(app, appVersion) ? 'bitcoin' : 'legacy';\n            RequestBitcoin._lowLevelApiPromise = this._loadLowLevelApi()\n                .then(\n                    // We use the currency parameter to choose which api to use, by passing 'bitcoin' for the new api\n                    // and something else for the old api, because the old api is currently used for all Bitcoin forks /\n                    // altcoins.\n                    (LowLevelApi: LowLevelApiConstructor) => new LowLevelApi({ transport, currency: apiToUse }),\n                    (e) => {\n                        RequestBitcoin._lowLevelApiPromise = null;\n                        return Promise.reject(e);\n                    },\n                );\n        }\n        return RequestBitcoin._lowLevelApiPromise;\n    }\n\n    private async _loadLowLevelApi(): Promise<LowLevelApiConstructor> {\n        try {\n            return (await import('@ledgerhq/hw-app-btc')).default;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e instanceof Error ? e.message : e}`,\n                this,\n            );\n        }\n    }\n\n    protected async _loadBitcoinLib(): Promise<BitcoinLib> {\n        try {\n            return await import('./bitcoin-lib');\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e instanceof Error ? e.message : e}`,\n                this,\n            );\n        }\n    }\n\n    protected async _loadSha256(): Promise<Sha256> {\n        try {\n            // Note: we've not installed sha.js as dependency, to make sure we're using the version that comes with\n            // @ledgerhq/hw-app-btc and bitcoinjs-lib#create-hash without the risk of bundling an additional version.\n            return (await import('sha.js/sha256')).default; // eslint-disable-line import/no-extraneous-dependencies\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e instanceof Error ? e.message : e}`,\n                this,\n            );\n        }\n    }\n}\n"],"names":[],"mappings":"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"}