{"version":3,"file":"lazy-chunk-low-level-api.es.js","sources":["source-mapped://source-mapped/src/low-level-api/low-level-api-utils.ts","source-mapped://source-mapped/src/low-level-api/low-level-api.ts"],"sourcesContent":["import { NimiqVersion } from '../lib/constants';\nimport { isNimiqLegacy, loadNimiq } from '../lib/load-nimiq';\n\nexport function parsePath(path: string): Buffer {\n    if (!path.startsWith('44\\'/242\\'')) {\n        throw new Error(\n            `Not a Nimiq BIP32 path. Path: ${path}. The Nimiq app is authorized only for paths starting with 44'/242'. `\n            + ' Example: 44\\'/242\\'/0\\'/0\\'',\n        );\n    }\n\n    const pathParts: number[] = path.split('/').map((part) => {\n        let number = parseInt(part, 10);\n        if (Number.isNaN(number)) {\n            throw new Error(`Invalid path: ${path}`);\n        }\n        if (part.endsWith('\\'')) {\n            number += 0x80000000;\n        } else {\n            throw new Error(\n                'Detected a non-hardened path element in requested BIP32 path.'\n                + ' Non-hardended paths are not supported at this time. Please use an all-hardened path.'\n                + ' Example: 44\\'/242\\'/0\\'/0\\'',\n            );\n        }\n        return number;\n    });\n\n    const pathBuffer = Buffer.alloc(1 + pathParts.length * 4);\n    pathBuffer[0] = pathParts.length;\n    pathParts.forEach((element, index) => {\n        pathBuffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return pathBuffer;\n}\n\nexport async function publicKeyToAddress(publicKey: Buffer, nimiqVersion: NimiqVersion): Promise<string> {\n    // Cryptography is needed for hashing public key to an address.\n    const Nimiq = await loadNimiq(nimiqVersion, /* include cryptography */ true);\n    return new Nimiq.PublicKey(publicKey).toAddress().toUserFriendlyAddress();\n}\n\nexport async function verifySignature(\n    data: Buffer | Uint8Array,\n    signature: Buffer | Uint8Array,\n    publicKey: Buffer | Uint8Array,\n    nimiqVersion: NimiqVersion,\n): Promise<boolean> {\n    // Cryptography is needed for verifying signatures.\n    const Nimiq = await loadNimiq(nimiqVersion, /* include cryptography */ true);\n    if (isNimiqLegacy(Nimiq)) {\n        const nimiqSignature = new Nimiq.Signature(signature);\n        const nimiqPublicKey = new Nimiq.PublicKey(publicKey);\n        return nimiqSignature.verify(nimiqPublicKey, data);\n    } else {\n        const nimiqSignature = Nimiq.Signature.deserialize(signature);\n        const nimiqPublicKey = new Nimiq.PublicKey(publicKey);\n        return nimiqPublicKey.verify(nimiqSignature, data);\n    }\n}\n","import { parsePath, publicKeyToAddress, verifySignature } from './low-level-api-utils';\nimport getAppNameAndVersion from './get-app-name-and-version';\nimport { NimiqVersion } from '../lib/constants';\nimport { loadNimiq } from '../lib/load-nimiq';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nconst CLA = 0xe0;\nconst INS_GET_PK = 0x02;\nconst INS_SIGN_TX = 0x04;\nconst INS_KEEP_ALIVE = 0x08;\nconst INS_SIGN_MESSAGE = 0x0a;\n\nconst APDU_MAX_SIZE = 255; // see IO_APDU_BUFFER_SIZE in os.h in ledger sdk\nconst P1_FIRST_APDU = 0x00;\nconst P1_MORE_APDU = 0x80;\nconst P1_NO_VALIDATE = 0x00;\nconst P1_VALIDATE = 0x01;\nconst P2_LAST_APDU = 0x00;\nconst P2_MORE_APDU = 0x80;\nconst P2_NO_CONFIRM = 0x00;\nconst P2_CONFIRM = 0x01;\n\nconst MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HEX = 1 << 0; // eslint-disable-line no-bitwise\nconst MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HASH = 1 << 1; // eslint-disable-line no-bitwise\n\n// Definition of common status words:\n// - https://github.com/LedgerHQ/ledger-secure-sdk/blob/master/include/errors.h\n// - https://github.com/LedgerHQ/app-bitcoin-new/blob/master/src/boilerplate/sw.h\n// - https://github.com/LedgerHQ/app-bitcoin/blob/master/include/btchip_apdu_constants.h\n// - https://ledgerhq.github.io/btchip-doc/bitcoin-technical-beta.html#_status_words\nconst SW_OK = 0x9000;\nconst SW_CANCEL = 0x6985;\nconst SW_KEEP_ALIVE = 0x6e02;\n\nconst U2F_SCRAMBLE_KEY = 'w0w';\n\n// The @ledgerhq libraries use Node Buffers which need to be polyfilled in the browser. To avoid the need to bundle such\n// polyfills that an app likely already has bundled in the @ledgerhq libraries, this library expects a global polyfill\n// declared on window.\ndeclare global {\n    interface Window {\n        Buffer?: typeof Buffer;\n    }\n}\n\n/**\n * Nimiq API\n *\n * Low level api for communication with the Ledger wallet Nimiq app. This lib is compatible with all @ledgerhq/transport\n * libraries but does on the other hand not include optimizations for specific transport types and returns raw bytes.\n *\n * This library is in nature similar to other hw-app packages in @ledgerhq/ledgerjs and partially based on their code,\n * licenced under the Apache 2.0 licence.\n *\n * @example\n * const nim = new LowLevelApi(transport)\n */\nexport default class LowLevelApi {\n    private _transport: Transport;\n\n    constructor(transport: Transport) {\n        this._transport = transport;\n        // Note that getAppNameAndVersion does not need to be decorated, as we're decorating it manually. Also note that\n        // the registered methods here do not intersect with the methods of the Bitcoin api, therefore, we can re-use\n        // the same transport instance for both, NIM and BTC apis (as long as a switch between NIM and BTC apps doesn't\n        // cause a disconnect).\n        transport.decorateAppAPIMethods(\n            this,\n            ['getPublicKey', 'signTransaction'],\n            U2F_SCRAMBLE_KEY,\n        );\n    }\n\n    public get transport(): Transport {\n        return this._transport;\n    }\n\n    /**\n     * Close the transport instance. Note that this does not emit a disconnect. Disconnects are only emitted when the\n     * device actually disconnects (or switches it's descriptor which happens when switching to the dashboard or apps).\n     */\n    public async close() {\n        try {\n            await this._transport.close();\n        } catch (e) {\n            // Ignore. Transport might already be closed.\n        }\n    }\n\n    /**\n     * Get the name of the connected app and the app version.\n     * @returns An object with the name and version.\n     * @example\n     * nim.getAppNameAndVersion().then(o => o.version)\n     */\n    public async getAppNameAndVersion(): Promise<{ name: string, version: string }> {\n        return getAppNameAndVersion(this._transport, U2F_SCRAMBLE_KEY);\n    }\n\n    /**\n     * Get Nimiq address for a given BIP 32 path.\n     * @param path - A path in BIP 32 format.\n     * @param [boolValidate] - Optionally enable key pair validation.\n     * @param [boolDisplay] - Optionally display the address on the ledger.\n     * @param [nimiqVersion] - Optionally choose which Nimiq library version to use for internal computations.\n     * @returns An object with the address.\n     * @example\n     * nim.getAddress(\"44'/242'/0'/0'\").then(o => o.address)\n     */\n    public async getAddress(\n        path: string,\n        boolValidate: boolean = true,\n        boolDisplay: boolean = false,\n        nimiqVersion: NimiqVersion = NimiqVersion.ALBATROSS,\n    ): Promise<{ address: string }> {\n        // Start loading Nimiq core later needed for hashing public key to address and optional validation.\n        loadNimiq(nimiqVersion, /* include cryptography */ true).catch(() => {});\n\n        const { publicKey } = await this.getPublicKey(path, boolValidate, boolDisplay, nimiqVersion);\n        const address = await publicKeyToAddress(Buffer.from(publicKey), nimiqVersion);\n        return { address };\n    }\n\n    /**\n     * Get Nimiq public key for a given BIP 32 path.\n     * @param path - A path in BIP 32 format.\n     * @param [boolValidate] - Optionally enable key pair validation.\n     * @param [boolDisplay] - Optionally display the corresponding address on the ledger.\n     * @param [nimiqVersion] - Optionally choose which Nimiq library version to use for internal computations.\n     * @returns An object with the publicKey.\n     * @example\n     * nim.getPublicKey(\"44'/242'/0'/0'\").then(o => o.publicKey)\n     */\n    public async getPublicKey(\n        path: string,\n        boolValidate: boolean = true,\n        boolDisplay: boolean = false,\n        nimiqVersion: NimiqVersion = NimiqVersion.ALBATROSS,\n    ): Promise<{ publicKey: Uint8Array }> {\n        if (boolValidate) {\n            // Start loading Nimiq core later needed for validation.\n            loadNimiq(nimiqVersion, /* include cryptography */ true).catch(() => {});\n        }\n\n        const pathBuffer = parsePath(path);\n        // Validation message including prefix \"dummy-data:\" as required since app version 2.0 to avoid the risks of\n        // blind signing.\n        const validationMessage = Buffer.from('dummy-data:p=np?', 'ascii');\n        const data = boolValidate ? Buffer.concat([pathBuffer, validationMessage]) : pathBuffer;\n\n        let response: Buffer;\n        response = await this._transport.send(\n            CLA,\n            INS_GET_PK,\n            boolValidate ? P1_VALIDATE : P1_NO_VALIDATE,\n            boolDisplay ? P2_CONFIRM : P2_NO_CONFIRM,\n            data,\n            [SW_OK, SW_KEEP_ALIVE],\n        );\n        // handle heartbeat\n        while (response.slice(response.length - 2).readUInt16BE(0) === SW_KEEP_ALIVE) {\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(CLA, INS_KEEP_ALIVE, 0, 0, undefined, [SW_OK, SW_KEEP_ALIVE]);\n        }\n\n        let offset = 0;\n        const publicKey = response.slice(offset, offset + 32);\n        offset += 32;\n        if (boolValidate) {\n            const signature = response.slice(offset, offset + 64);\n            if (!await verifySignature(validationMessage, signature, publicKey, nimiqVersion)) {\n                throw new Error(\n                    'Bad signature. Keypair is invalid. Please report this.',\n                );\n            }\n        }\n        return { publicKey };\n    }\n\n    /* eslint-disable lines-between-class-members */\n    /**\n     * Sign a Nimiq transaction.\n     * @param path - A path in BIP 32 format.\n     * @param txContent - Transaction content in serialized form.\n     * @param [nimiqVersion] - Of which format / version the serialized transaction is. By default Albatross.\n     * @param [appVersion] - For legacy transactions used to determine whether to transmit a version byte. If the\n     *  connected app version is already known, you can pass it to avoid the overhead of querying it again.\n     * @returns An object with the signature.\n     * @example\n     * nim.signTransaction(\"44'/242'/0'/0'\", txContent).then(o => o.signature)\n     */\n    public async signTransaction(\n        path: string,\n        txContent: Uint8Array,\n        nimiqVersion: NimiqVersion.LEGACY,\n        appVersion?: string,\n    ): Promise<{ signature: Uint8Array, stakerSignature?: undefined }>;\n    public async signTransaction(\n        path: string,\n        txContent: Uint8Array,\n        nimiqVersion?: NimiqVersion,\n    ): Promise<{ signature: Uint8Array, stakerSignature?: Uint8Array }>;\n    public async signTransaction(\n        path: string,\n        txContent: Uint8Array,\n        nimiqVersion: NimiqVersion = NimiqVersion.ALBATROSS,\n        appVersion?: string,\n    ): Promise<{ signature: Uint8Array, stakerSignature?: Uint8Array }> {\n        // The Nimiq version byte was added in app version 2. It supports both, legacy and Albatross transactions, and\n        // is the first app version to support Albatross. Note that wrongly sending a legacy transaction without version\n        // byte to the 2.0 app does no harm, as the app will reject it. Neither does sending an Albatross transaction,\n        // with version byte, to a legacy app before 2.0 as the app will interpret the version byte of value 1 as the\n        // first byte of the uint16 data length, resulting in a data length longer than the allowed max which will be\n        // rejected.\n        if (nimiqVersion === NimiqVersion.LEGACY && !appVersion) {\n            ({ version: appVersion } = await getAppNameAndVersion(\n                this._transport,\n                U2F_SCRAMBLE_KEY,\n                /* withApiLock */ false, // Don't lock the api, as we already locked it for signTransaction.\n            ));\n        }\n        const includeVersionByte = nimiqVersion === NimiqVersion.ALBATROSS || parseInt(appVersion || '') >= 2;\n\n        const pathBuffer = parsePath(path);\n        const versionByteBuffer = includeVersionByte\n            ? new Uint8Array([nimiqVersion === NimiqVersion.ALBATROSS ? 1 : 0])\n            : new Uint8Array();\n        const transactionBuffer = Buffer.from(txContent);\n        const apdus = [];\n        let transactionChunkSize = APDU_MAX_SIZE - pathBuffer.length - versionByteBuffer.length;\n        if (transactionBuffer.length <= transactionChunkSize) {\n            // it fits in a single apdu\n            apdus.push(Buffer.concat([pathBuffer, versionByteBuffer, transactionBuffer]));\n        } else {\n            // we need to send multiple apdus to transmit the entire transaction\n            let transactionChunk = Buffer.alloc(transactionChunkSize);\n            let offset = 0;\n            transactionBuffer.copy(transactionChunk, 0, offset, transactionChunkSize);\n            apdus.push(Buffer.concat([pathBuffer, versionByteBuffer, transactionChunk]));\n            offset += transactionChunkSize;\n            while (offset < transactionBuffer.length) {\n                const remaining = transactionBuffer.length - offset;\n                transactionChunkSize = remaining < APDU_MAX_SIZE ? remaining : APDU_MAX_SIZE;\n                transactionChunk = Buffer.alloc(transactionChunkSize);\n                transactionBuffer.copy(transactionChunk, 0, offset, offset + transactionChunkSize);\n                offset += transactionChunkSize;\n                apdus.push(transactionChunk);\n            }\n        }\n\n        let isHeartbeat = false;\n        let chunkIndex = 0;\n        let status: number;\n        let response: Buffer;\n        do {\n            const data = apdus[chunkIndex];\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(\n                CLA,\n                isHeartbeat ? INS_KEEP_ALIVE : INS_SIGN_TX,\n                chunkIndex === 0 ? P1_FIRST_APDU : P1_MORE_APDU, // note that for heartbeat p1, p2 and data are ignored\n                chunkIndex === apdus.length - 1 ? P2_LAST_APDU : P2_MORE_APDU,\n                data,\n                [SW_OK, SW_CANCEL, SW_KEEP_ALIVE],\n            );\n            status = response.slice(response.length - 2).readUInt16BE(0);\n            isHeartbeat = status === SW_KEEP_ALIVE;\n            if (!isHeartbeat) {\n                // we can continue sending data or end the loop when all data was sent\n                ++chunkIndex;\n            }\n        } while (isHeartbeat || chunkIndex < apdus.length);\n\n        if (status !== SW_OK) throw new Error('Transaction approval request was rejected');\n        const signatureCount = (response.length - /* sw */ 2) / 64;\n        if (signatureCount !== 1 && signatureCount !== 2) {\n            throw new Error('Unexpected response length');\n        }\n        const signature = response.slice(0, 64);\n        let stakerSignature: Uint8Array | undefined;\n        if (signatureCount === 2) {\n            if (nimiqVersion === NimiqVersion.LEGACY) {\n                throw new Error('Unexpected staker signature on legacy transaction');\n            }\n            stakerSignature = response.slice(64, 128);\n        }\n        return { signature, stakerSignature };\n    }\n    /* eslint-enable lines-between-class-members */\n\n    /**\n     * Sign a message with a Nimiq key.\n     * @param path - A path in BIP 32 format.\n     * @param message - Message to sign as utf8 string or arbitrary bytes.\n     * @param [flags] - Flags to pass. Currently supported: `preferDisplayTypeHex` and `preferDisplayTypeHash`.\n     * @returns An object with the signature.\n     * @example\n     * nim.signMessage(\"44'/242'/0'/0'\", message).then(o => o.signature)\n     */\n    public async signMessage(\n        path: string,\n        message: string | Uint8Array,\n        flags?: number | {\n            preferDisplayTypeHex: boolean, // first choice, if multiple flags are set\n            preferDisplayTypeHash: boolean, // second choice, if multiple flags are set\n        },\n    ): Promise<{ signature: Uint8Array }> {\n        const pathBuffer = parsePath(path);\n        const messageBuffer = typeof message === 'string'\n            ? Buffer.from(message, 'utf8') // throws if invalid utf8\n            : Buffer.from(message);\n        flags = typeof flags === 'object'\n            // eslint-disable-next-line no-bitwise\n            ? (flags.preferDisplayTypeHex ? MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HEX : 0)\n                | (flags.preferDisplayTypeHash ? MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HASH : 0)\n            : flags || 0;\n        const flagsBuffer = Buffer.from([flags]);\n        if (messageBuffer.length >= 2 ** 32) {\n            // the message length must fit an uint32\n            throw new Error('Message too long');\n        }\n        const messageLengthBuffer = Buffer.alloc(4);\n        messageLengthBuffer.writeUInt32BE(messageBuffer.length);\n        const apdus = [];\n\n        let messageChunkSize = Math.min(\n            messageBuffer.length,\n            APDU_MAX_SIZE - pathBuffer.length - flagsBuffer.length - messageLengthBuffer.length,\n        );\n        let messageChunk = Buffer.alloc(messageChunkSize);\n        let messageOffset = 0;\n        messageBuffer.copy(messageChunk, 0, messageOffset, messageChunkSize);\n        apdus.push(Buffer.concat([pathBuffer, flagsBuffer, messageLengthBuffer, messageChunk]));\n        messageOffset += messageChunkSize;\n        while (messageOffset < messageBuffer.length) {\n            messageChunkSize = Math.min(messageBuffer.length - messageOffset, APDU_MAX_SIZE);\n            messageChunk = Buffer.alloc(messageChunkSize);\n            messageBuffer.copy(messageChunk, 0, messageOffset, messageOffset + messageChunkSize);\n            messageOffset += messageChunkSize;\n            apdus.push(messageChunk);\n        }\n\n        let isHeartbeat = false;\n        let chunkIndex = 0;\n        let status: number;\n        let response: Buffer;\n        do {\n            const data = apdus[chunkIndex];\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(\n                CLA,\n                isHeartbeat ? INS_KEEP_ALIVE : INS_SIGN_MESSAGE,\n                chunkIndex === 0 ? P1_FIRST_APDU : P1_MORE_APDU, // note that for heartbeat p1, p2 and data are ignored\n                chunkIndex === apdus.length - 1 ? P2_LAST_APDU : P2_MORE_APDU,\n                data,\n                [SW_OK, SW_CANCEL, SW_KEEP_ALIVE],\n            );\n            status = response.slice(response.length - 2).readUInt16BE(0);\n            isHeartbeat = status === SW_KEEP_ALIVE;\n            if (!isHeartbeat) {\n                // we can continue sending data or end the loop when all data was sent\n                ++chunkIndex;\n            }\n        } while (isHeartbeat || chunkIndex < apdus.length);\n\n        if (status !== SW_OK) throw new Error('Message approval request was rejected');\n        const signature = response.slice(0, response.length - 2);\n        return { signature };\n    }\n}\n"],"names":["Buffer"],"mappings":"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"}