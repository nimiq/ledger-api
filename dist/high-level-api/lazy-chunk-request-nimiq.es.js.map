{"version":3,"file":"lazy-chunk-request-nimiq.es.js","sources":["source-mapped://source-mapped/src/lib/load-nimiq.ts","source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-nimiq.ts"],"sourcesContent":["import { NimiqVersion } from '../lib/constants';\n\n// Note: @nimiq/albatross-wasm is mapped to @nimiq/core@next in package.json. @nimiq/albatross-wasm is the name that the\n// Nimiq Hub uses, which is why we use it here, too.\nexport type Nimiq<Version extends NimiqVersion> = Version extends NimiqVersion.ALBATROSS\n    ? typeof import('@nimiq/albatross-wasm')\n    : typeof import('@nimiq/core-web');\n\n// Accessor for primitives that exist in Nimiq Legacy and Nimiq Albatross under the same name.\ntype CommonPrimitives = Extract<keyof typeof import('@nimiq/albatross-wasm'), keyof typeof import('@nimiq/core-web')>;\nexport type NimiqPrimitive<\n    Primitive extends CommonPrimitives,\n    Version extends NimiqVersion,\n> = InstanceType<Nimiq<Version>[Primitive]>;\n\nexport function isNimiqLegacy(core: Nimiq<NimiqVersion>): core is Nimiq<NimiqVersion.LEGACY> {\n    // Note that checking for core.Version.CORE_JS_VERSION would be nicer, but it's unfortunately not available in the\n    // web-offline variant.\n    return 'GenesisConfig' in core && core.GenesisConfig.CONFIGS.main.NETWORK_ID === 42;\n}\n\nexport function isNimiqLegacyPrimitive<Primitive extends CommonPrimitives = /* enforce specifying manually */ never>(\n    primitive: NimiqPrimitive<Primitive, NimiqVersion>,\n): primitive is NimiqPrimitive<Primitive, NimiqVersion.LEGACY> {\n    return !('__destroy_into_raw' in primitive || '__wrap' in primitive.constructor);\n}\n\nexport async function loadNimiq<Version extends NimiqVersion>(\n    nimiqVersion: Version,\n    inlcudeNimiqLegacyCryptography: boolean,\n    preloadWasm = true,\n): Promise<Nimiq<Version>> {\n    const [Nimiq] = await Promise.all(nimiqVersion === NimiqVersion.ALBATROSS\n        ? [loadNimiqAlbatrossCore(preloadWasm)]\n        : [\n            loadNimiqLegacyCore(),\n            ...(inlcudeNimiqLegacyCryptography ? [loadNimiqLegacyCryptography(preloadWasm)] : []),\n        ],\n    );\n    return Nimiq as Nimiq<Version>;\n}\n\ndeclare module './load-nimiq' {\n    // Nimiq Hub defines globals Nimiq and loadAlbatross, which we'll use for special treatment if running in the Hub\n    // (the main consumer of this ledger-api). Although they are in fact global variables in the Hub, we don't do a\n    // global type augmentation here, to not pollute the global scope for others and to discourage usage of the globals\n    // within this library.\n    const Nimiq: undefined | Nimiq<NimiqVersion.LEGACY>;\n    const loadAlbatross: undefined | (() => Promise<{\n        Client: Nimiq<NimiqVersion.ALBATROSS>['Client'],\n        ClientConfiguration: Nimiq<NimiqVersion.ALBATROSS>['ClientConfiguration'],\n    }>);\n\n    // Integrity hash is defined in rollup.config.js.\n    const __nimiqLegacyCoreWasmIntegrityHash__: string; // eslint-disable-line @typescript-eslint/naming-convention\n}\n\nconst isNimiqAlbatrossHub = typeof loadAlbatross !== 'undefined' && (\n    // Running on Hub domain.\n    /^hub\\.(?:pos\\.)?nimiq(?:-testnet)?\\.com$/.test(window.location.hostname)\n    // Or running on localhost:8081 or BrowserStack's bs-local.com:8081 which is where Hub dev versions are run.\n    || /^(?:localhost|bs-local\\.com):8081$/.test(window.location.host)\n);\nconst nimiqCoreBasePath = isNimiqAlbatrossHub\n    // On a Nimiq Hub with Albatross support, use the Hub's copy of the core (copied from @nimiq/albatross-wasm in the\n    // Hub's vue.config.js, which is an alias for @nimiq/core@next), same as the Hub itself is doing, to avoid using and\n    // loading an additional version.\n    ? '/albatross-client/web/'\n    // In other cases load @nimiq/core-web@next from jsdelivr. Load from cdn to avoid bundling a copy of core if it's\n    // not needed. This way, we also don't need to handle the wasm file in the rollup config.\n    : 'https://cdn.jsdelivr.net/npm/@nimiq/core@next/web/';\nlet nimiqCorePromise: Promise<Nimiq<NimiqVersion.ALBATROSS>> | null = null;\n\nasync function loadNimiqAlbatrossCore(preloadWasm = true): Promise<Nimiq<NimiqVersion.ALBATROSS>> {\n    nimiqCorePromise = nimiqCorePromise || (async () => {\n        try {\n            if (preloadWasm) {\n                // Preload wasm in parallel. We only need the main wasm, not the Client or worker.\n                // No integrity hash here, because main-wasm/index.js loads the wasm without integrity hash.\n                preloadAsset(`${nimiqCoreBasePath}main-wasm/index_bg.wasm`, 'fetch', true);\n            }\n\n            // Note: we don't import /web/index.js or run the Hub's loadAlbatross because we don't need the Client which\n            // depends on and loads the worker, including the worker wasm, and is auto-instantiated in /web/index.js. We\n            // only load the main wasm handler and initialize it, which loads the main wasm. Note that these are the\n            // exact same files as loaded by the Hub, i.e. there is no double loading happening as files will be already\n            // cached. Also, calling init again when the wasm is already initialized, does not unnecessarily initialize\n            // or fetch anything again.\n            const Nimiq = await import(`${nimiqCoreBasePath}main-wasm/index.js`);\n            const { default: init } = Nimiq;\n            await init();\n            return Nimiq;\n        } catch (e) {\n            nimiqCorePromise = null;\n            throw e;\n        }\n    })();\n    return nimiqCorePromise;\n}\n\nconst nimiqLegacyCoreBasePath = window.location.hostname.endsWith('.nimiq.com')\n    // On the nimiq.com domain use cdn.nimiq.com.\n    ? 'https://cdn.nimiq.com/'\n    // On other domains use jsdelivr instead of nimiq cdn to avoid getting blocked by ad blockers.\n    : 'https://cdn.jsdelivr.net/npm/@nimiq/core-web/';\nlet nimiqLegacyCorePromise: Promise<Nimiq<NimiqVersion.LEGACY>> | null = null;\nlet nimiqLegacyCryptographyPromise: Promise<void> | null = null;\n\n/**\n * Lazy-load the Nimiq core api from the cdn server if it's not loaded yet.\n */\nasync function loadNimiqLegacyCore(coreVariant: 'web' | 'web-offline' = 'web-offline')\n    : Promise<Nimiq<NimiqVersion.LEGACY>> {\n    // Return global Nimiq if already loaded from @nimiq/core-web, for example in Nimiq Hub.\n    if (typeof Nimiq !== 'undefined') return Nimiq;\n\n    nimiqLegacyCorePromise = nimiqLegacyCorePromise || new Promise<void>((resolve, reject) => {\n        console.warn('Support for Nimiq Legacy is deprecated and will be removed in the future.');\n        const $head = document.getElementsByTagName('head')[0];\n        const $script = document.createElement('script');\n        $script.type = 'text/javascript';\n        $script.onload = () => {\n            $script.parentNode!.removeChild($script);\n            resolve();\n        };\n        $script.onerror = (e) => {\n            $script.parentNode!.removeChild($script);\n            reject(e);\n        };\n        $script.src = `${nimiqLegacyCoreBasePath}${coreVariant}.js`;\n        $head.appendChild($script);\n    }).then(\n        () => Nimiq!, // The Nimiq global has been set by the legacy Core.\n        (e) => {\n            nimiqLegacyCorePromise = null;\n            return Promise.reject(e);\n        },\n    );\n    return nimiqLegacyCorePromise;\n}\n\n/**\n * Load the WebAssembly and module for cryptographic functions. You will have to do this before calculating hashes,\n * deriving keys or addresses, signing transactions or messages, etc.\n */\nasync function loadNimiqLegacyCryptography(preloadWasm = true): Promise<void> {\n    nimiqLegacyCryptographyPromise = nimiqLegacyCryptographyPromise || (async () => {\n        try {\n            if (preloadWasm) {\n                // Preload wasm and wasm handler in parallel.\n                preloadAsset(`${nimiqLegacyCoreBasePath}worker-wasm.wasm`, 'fetch', true);\n                preloadAsset(\n                    `${nimiqLegacyCoreBasePath}worker-wasm.js`,\n                    'script',\n                    true,\n                    __nimiqLegacyCoreWasmIntegrityHash__,\n                );\n            }\n\n            const NimiqLegacy = await loadNimiqLegacyCore();\n            // Note: this will not import the wasm again if it has already been imported, for example by the parent app.\n            await NimiqLegacy.WasmHelper.doImport();\n        } catch (e) {\n            nimiqLegacyCryptographyPromise = null;\n            throw e;\n        }\n    })();\n    return nimiqLegacyCryptographyPromise;\n}\n\nfunction preloadAsset(asset: string, as: string, crossOrigin?: boolean, integrity?: string) {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = as;\n    link.href = asset;\n    link.onload = link.onerror = () => document.head.removeChild(link); // eslint-disable-line no-multi-assign\n    if (crossOrigin) link.crossOrigin = '';\n    if (integrity) link.integrity = integrity;\n    document.head.appendChild(link);\n}\n","import Request, { CoinAppConnection } from '../request';\nimport { Coin, RequestTypeNimiq } from '../../constants';\nimport { getBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\nimport { NimiqVersion } from '../../../lib/constants';\nimport { loadNimiq, type Nimiq } from '../../../lib/load-nimiq';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype LowLevelApiConstructor = typeof import('../../../low-level-api/low-level-api').default;\n\ntype LowLevelApi = InstanceType<LowLevelApiConstructor>;\n\nexport { RequestTypeNimiq };\n\nexport default abstract class RequestNimiq<Version extends NimiqVersion, T>\n    extends Request<T> {\n    private static _lowLevelApiPromise: Promise<LowLevelApi> | null = null;\n\n    public readonly coin: Coin.NIMIQ = Coin.NIMIQ;\n    public readonly requiredApp: string = 'Nimiq';\n    public readonly nimiqVersion: Version;\n\n    public get minRequiredAppVersion(): string {\n        return '1.4.2'; // first version supporting web usb\n    }\n\n    protected constructor(nimiqVersion: Version, expectedWalletId?: string) {\n        super(expectedWalletId);\n        this.nimiqVersion = nimiqVersion;\n\n        // Preload dependencies. Nimiq lib is preloaded individually by request child classes that need it.\n        // Ignore errors.\n        Promise.all([\n            this._loadLowLevelApi(), // needed by all requests\n            this._isWalletIdDerivationRequired ? this._loadNimiq() : null,\n        ]).catch(() => {});\n    }\n\n    public async checkCoinAppConnection(transport: Transport): Promise<CoinAppConnection> {\n        const coinAppConnection = await super.checkCoinAppConnection(transport, 'w0w');\n        if (!this._isWalletIdDerivationRequired) return coinAppConnection; // skip wallet id derivation\n\n        // Note that api and Nimiq are preloaded in the constructor, therefore we don't need to optimize for load order\n        // or execution order here.\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        // Set validate to false as otherwise the call is much slower. For U2F this can also unfreeze the ledger app,\n        // see transport-comparison.md. However, not sure whether this is still true today and as it's less relevant now\n        // with WebUsb being used by default, we ignore this side effect for !this._isWalletIdDerivationRequired case.\n        const { publicKey: firstAddressPubKeyBytes } = await api.getPublicKey(\n            getBip32Path({ coin: Coin.NIMIQ, addressIndex: 0 }),\n            false, // validate\n            false, // display\n            this.nimiqVersion,\n        );\n\n        const Nimiq = await this._loadNimiq(); // throws LOADING_DEPENDENCIES_FAILED on failure\n\n        // Compute base64 wallet id. Use sha256 as blake2b yields the nimiq address\n        const walletIdHash = Nimiq.Hash.computeSha256(firstAddressPubKeyBytes);\n        const walletId = btoa(String.fromCodePoint(...walletIdHash));\n        coinAppConnection.walletId = walletId; // change the original object which equals _coinAppConnection\n        this._checkExpectedWalletId(walletId);\n        return coinAppConnection;\n    }\n\n    protected async _getLowLevelApi(transport: Transport): Promise<LowLevelApi> {\n        if (!RequestNimiq._lowLevelApiPromise || transport !== (await RequestNimiq._lowLevelApiPromise).transport) {\n            // no low level api instantiated yet or transport / transport type changed in the meantime\n            RequestNimiq._lowLevelApiPromise = this._loadLowLevelApi()\n                .then(\n                    (LowLevelApi: LowLevelApiConstructor) => new LowLevelApi(transport),\n                    (e) => {\n                        RequestNimiq._lowLevelApiPromise = null;\n                        return Promise.reject(e);\n                    },\n                );\n        }\n        return RequestNimiq._lowLevelApiPromise;\n    }\n\n    private async _loadLowLevelApi(): Promise<LowLevelApiConstructor> {\n        try {\n            // build the low-level-api from source instead of taking it from dist to create optimized chunks and to\n            // avoid double bundling of dependencies like buffer.\n            return (await import('../../../low-level-api/low-level-api')).default;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e instanceof Error ? e.message : e}`,\n                this,\n            );\n        }\n    }\n\n    protected async _loadNimiq(): Promise<Nimiq<Version>> {\n        try {\n            // Note: cryptography is needed for wallet id hashing, if requested, and pub key to address derivation in\n            // SignatureProof and BasicTransaction.\n            return await loadNimiq(this.nimiqVersion, /* include cryptography */ true);\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.LOADING_DEPENDENCIES_FAILED,\n                `Failed loading dependencies: ${e instanceof Error ? e.message : e}`,\n                this,\n            );\n        }\n    }\n}\n"],"names":[],"mappings":"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"}