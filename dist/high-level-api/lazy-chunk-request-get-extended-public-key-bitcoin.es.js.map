{"version":3,"file":"lazy-chunk-request-get-extended-public-key-bitcoin.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/bitcoin/bitcoin-utils.ts","source-mapped://source-mapped/src/high-level-api/requests/bitcoin/request-get-extended-public-key-bitcoin.ts"],"sourcesContent":["import { Network, AddressTypeBitcoin } from '../../constants';\n\ntype NetworkInfo = import('./bitcoin-lib').networks.Network;\n\n// TODO if in the future the interchangeability of bitcoin-lib with the Nimiq hub's BitcoinJS is not needed anymore,\n//  this can move directly into the lazy loaded bitcoin-lib and then also be lazy loaded.\nexport async function getNetworkInfo(\n    network: Exclude<Network, Network.DEVNET>,\n    addressType: AddressTypeBitcoin,\n): Promise<NetworkInfo> {\n    // async because bitcoin-lib is lazy loaded\n    const { networks } = await import('./bitcoin-lib');\n\n    const result: NetworkInfo = {\n        [Network.MAINNET]: networks.bitcoin,\n        [Network.TESTNET]: networks.testnet,\n    }[network];\n    if (!result) throw new Error(`Unsupported network ${network}`);\n\n    // Bip32 version bytes for different address types which are not all defined by the bip32 lib,\n    // see https://github.com/satoshilabs/slips/blob/master/slip-0132.md#registered-hd-version-bytes\n    const versionBytes = {\n        [AddressTypeBitcoin.LEGACY]: {\n            [Network.MAINNET]: networks.bitcoin.bip32,\n            [Network.TESTNET]: networks.testnet.bip32,\n        },\n        [AddressTypeBitcoin.P2SH_SEGWIT]: {\n            [Network.MAINNET]: {\n                public: 0x049d7cb2, // ypub\n                private: 0x049d7878, // yprv\n            },\n            [Network.TESTNET]: {\n                public: 0x044a5262, // upub\n                private: 0x044a4e28, // uprv\n            },\n        },\n        [AddressTypeBitcoin.NATIVE_SEGWIT]: {\n            [Network.MAINNET]: {\n                public: 0x04b24746, // zpub\n                private: 0x04b2430c, // zprv\n            },\n            [Network.TESTNET]: {\n                public: 0x045f1cf6, // vpub\n                private: 0x045f18bc, // vprv\n            },\n        },\n    }[addressType][network]; // TODO should be using optional chaining here once we update rollup\n    if (!versionBytes) throw new Error(`Unknown version bytes for network ${network}, address type ${addressType}`);\n\n    return {\n        ...result,\n        bip32: versionBytes,\n    };\n}\n\n// Taken from https://github.com/LedgerHQ/ledger-wallet-webtool/blob/master/src/PathFinderUtils.js#L31\n// Also see https://github.com/LedgerHQ/ledger-live/blob/main/libs/ledgerjs/packages/hw-app-btc/src/compressPublicKey.ts\n// for a version operating on buffers. However, usage requires then loading the Buffer polyfill.\nexport function compressPublicKey(publicKey: string): string {\n    let compressedKeyIndex;\n    if (publicKey.substring(0, 2) !== '04') {\n        throw new Error('Invalid public key format');\n    }\n    if (parseInt(publicKey.substring(128, 130), 16) % 2 !== 0) {\n        compressedKeyIndex = '03';\n    } else {\n        compressedKeyIndex = '02';\n    }\n    return compressedKeyIndex + publicKey.substring(2, 66);\n}\n","import RequestBitcoin from './request-bitcoin';\nimport { compressPublicKey, getNetworkInfo } from './bitcoin-utils';\nimport { AddressTypeBitcoin, LedgerAddressFormatMapBitcoin, Network, RequestTypeBitcoin } from '../../constants';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nconst KEY_PATH_REGEX = new RegExp(\n    '^'\n    + '(?:m/)?' // optional m/ prefix\n    + '(44|49|84)\\'' // purpose id; BIP44 (BTC legacy) / BIP49 (BTC nested SegWit) / BIP84 (BTC native SegWit)\n    + '/(0|1)\\'' // coin type; 0 for Bitcoin Mainnet, 1 for Bitcoin Testnet\n    + '/\\\\d+\\'' // account index; allow only xpubs for specific accounts\n    + '(?:/\\\\d+\\'?)*' // sub paths; No constraints as they can be circumvented anyway by deriving from higher level xpub\n    + '$',\n);\n\nexport default class RequestGetExtendedPublicKeyBitcoin extends RequestBitcoin<string> {\n    public readonly type: RequestTypeBitcoin.GET_EXTENDED_PUBLIC_KEY = RequestTypeBitcoin.GET_EXTENDED_PUBLIC_KEY;\n    public readonly keyPath: string;\n    public readonly network: Exclude<Network, Network.DEVNET>;\n    private readonly _addressType: AddressTypeBitcoin;\n\n    constructor(keyPath: string, expectedWalletId?: string) {\n        super(expectedWalletId);\n        this.keyPath = keyPath;\n\n        // TODO check which paths are actually still allowed, ledgerjs' old implementation, new implementation and\n        //  https://github.com/LedgerHQ/app-bitcoin-new/blob/master/doc/bitcoin.md#description seem to differ.\n        // Check for keyPath validity. Not using parseBip32Path from bip32-utils as we allow exporting xpubs at\n        // arbitrary levels. Further restrictions could be circumvented anyways by deriving from higher level xpub.\n        const keyPathMatch = keyPath.match(KEY_PATH_REGEX) as null | [string, '44' | '49' | '84', '0' | '1'];\n        if (!keyPathMatch) {\n            throw new ErrorState(\n                ErrorType.REQUEST_ASSERTION_FAILED,\n                `Invalid keyPath ${keyPath}. Paths must follow bip44 and at least specify the purpose id`\n                    + ' (allowed are 44\\', 49\\', 84\\'), coin type (allowed are 0\\', 1\\') and account index (hardened).',\n                this,\n            );\n        }\n\n        const [, purposeId, networkId] = keyPathMatch;\n        this._addressType = {\n            44: AddressTypeBitcoin.LEGACY,\n            49: AddressTypeBitcoin.P2SH_SEGWIT,\n            84: AddressTypeBitcoin.NATIVE_SEGWIT,\n        }[purposeId];\n        this.network = ({\n            0: Network.MAINNET,\n            1: Network.TESTNET,\n        } as const)[networkId];\n\n        // Preload bitcoin lib. Ledger Bitcoin api is already preloaded by parent class. Ignore errors.\n        this._loadBitcoinLib().catch(() => {});\n    }\n\n    public async call(transport: Transport): Promise<string> {\n        // Get xpub as specified in bip32.\n        // (https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format)\n        const verificationPath = '0/0';\n        // The new api implemented in the Bitcoin app starting with 2.0 only supports original xpub (for mainnet)\n        // and tpub (for testnet) versions, which were initially defined for the legacy address type, see\n        // https://github.com/satoshilabs/slips/blob/master/slip-0132.md#registered-hd-version-bytes\n        const ledgerXpubVersion = this.network === Network.MAINNET ? /* xpub */ 0x0488b21e : /* tpub */ 0x043587cf;\n\n        // Note: We make api calls outside of the try...catch block to let the exceptions fall through such that\n        // _callLedger can decide how to behave depending on the api error. Load errors are converted to\n        // LOADING_DEPENDENCIES_FAILED error states by _getLowLevelApi and _LoadBitcoinLib. All other errors\n        // are converted to REQUEST_ASSERTION_FAILED errors which stop the execution of the request.\n        const [\n            { bip32 },\n            [ledgerXpub, verificationPubKey, verificationChainCode],\n        ] = await Promise.all([\n            this._loadBitcoinLib(), // throws LOADING_DEPENDENCIES_FAILED on failure\n            (async () => {\n                const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n                // Don't use Promise.all here because ledger requests have to be sent sequentially as ledger can only\n                // perform one request at a time.\n                const xpub = await api.getWalletXpub({\n                    path: this.keyPath,\n                    xpubVersion: ledgerXpubVersion,\n                });\n                // TODO Requesting the public key causes a confirmation screen to be displayed on the Ledger for u2f and\n                //  WebAuthn for every request if the user has this privacy feature enabled in the Bitcoin app.\n                //  Subsequent requests can provide a permission token in _getLowLevelApi to avoid this screen (see\n                //  https://github.com/LedgerHQ/app-bitcoin/blob/master/doc/btc.asc#get-wallet-public-key). This token\n                //  is however not supported in @ledgerhq/hw-app-btc and therefore has to be implemented by ourselves.\n                const {\n                    publicKey: verificationPubKeyHex,\n                    chainCode: verificationChainCodeHex,\n                } = await api.getWalletPublicKey(\n                    `${this.keyPath}/${verificationPath}`,\n                    { format: LedgerAddressFormatMapBitcoin[this._addressType] }, // must pass the appropriate format\n                );\n                return [\n                    xpub,\n                    Buffer.from(compressPublicKey(verificationPubKeyHex), 'hex'),\n                    Buffer.from(verificationChainCodeHex, 'hex'),\n                ] as [string, Buffer, Buffer];\n            })(),\n        ]);\n\n        try {\n            // Note getNetworkInfo is only async because it lazy loads the bitcoin lib, which is already loaded at this\n            // point. Therefore, putting it into the Promise.all has no further upside and errors within the call should\n            // become REQUEST_ASSERTION_FAILED exceptions anyway.\n            const networkInfo = await getNetworkInfo(this.network, this._addressType);\n\n            const extendedPubKey = bip32.fromBase58(ledgerXpub, {\n                ...networkInfo,\n                bip32: { ...networkInfo.bip32, public: ledgerXpubVersion },\n            });\n\n            // Verify that the generated xpub is correct by deriving an example child and comparing it to the result\n            // calculated by the Ledger device. No need to verify the Ledger generated address as it is derived from the\n            // pub key anyway.\n            const verificationDerivation = extendedPubKey.derivePath(verificationPath);\n            if (!verificationDerivation.publicKey.equals(verificationPubKey)\n                || !verificationDerivation.chainCode.equals(verificationChainCode)) {\n                throw new Error('Failed to verify the constructed xpub.');\n            }\n\n            // Export extended public key versioned as xpub, ypub, zpub, tpub, upub or vpub, according to the network\n            // and address type. We do this for compatibility with previous versions of our api and the Nimiq Keyguard\n            // and because it's still common practice. However, encoding as versions other than xpub and tpub is\n            // a somewhat deprecated standard nowadays. They're for example not used in PSBTs or descriptor wallets.\n            extendedPubKey.network = networkInfo;\n            return extendedPubKey.toBase58();\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e instanceof Error ? e : String(e), this);\n        }\n    }\n}\n"],"names":["Buffer"],"mappings":"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"}