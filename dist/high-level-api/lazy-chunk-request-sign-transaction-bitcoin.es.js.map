{"version":3,"file":"lazy-chunk-request-sign-transaction-bitcoin.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/bitcoin/request-sign-transaction-bitcoin.ts"],"sourcesContent":["import RequestBitcoin from './request-bitcoin';\nimport { AddressTypeBitcoin, Coin, Network, RequestTypeBitcoin } from '../../constants';\nimport { getLegacyApp } from '../../app-utils';\nimport { parseBip32Path } from '../../bip32-utils';\nimport ErrorState, { ErrorType } from '../../error-state';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\ntype BitcoinJsTransaction = import('bitcoinjs-lib').Transaction;\ntype BitcoinLib = typeof import('./bitcoin-lib');\ntype CreateTransactionArg = Parameters<import('@ledgerhq/hw-app-btc').default['createPaymentTransaction']>[0];\n// serializeTransactionOutputs is typed unnecessarily strict as it only uses the outputs of a transaction\ntype FixedSerializeTransactionOutputs =\n    (tx: Pick<Parameters<import('@ledgerhq/hw-app-btc').default['serializeTransactionOutputs']>[0], 'outputs'>)\n    => ReturnType<import('@ledgerhq/hw-app-btc').default['serializeTransactionOutputs']>;\n\nexport interface TransactionInfoBitcoin {\n    // The inputs to consume for this transaction (prev outs). @ledgerhq/hw-app-btc's createPaymentTransaction expects\n    // all inputs to be from the same account/xpub and thus also of the same type (native segwit, p2sh segwit or legacy)\n    inputs: Array<{\n        // full input transaction of which to take the output as input, either as serialized hex or in bitcoinjs-lib\n        // transaction format\n        transaction: string | BitcoinJsTransaction,\n        // index of the transaction's output which is now to be used as input\n        index: number,\n        // bip32 path of the key which needs to sign for redeeming the input (e.g. the previous \"recipient\")\n        keyPath: string,\n        // hex, optional custom script to be signed for consuming an input. In current versions of @ledgerhq/hw-app-btc\n        // this is essentially ignored (checked as of version 9.1.1), see hw-app-btc/src/newops/accounttype.ts. For\n        // p2wpkhWrapped a redeem script is accepted but only checked to be the expected one, other p2sh scripts are not\n        // accepted. On older versions, this could be a witness script for segwit transactions (native segwit or p2sh\n        // segwit), or a redeem script for other p2sh transactions and could be used for example to redeem from\n        // contracts or multisigs. Now, for legacy transactions the prevOut output script is used; for segwit\n        // transactions an appropriate default script from the public key at keyPath.\n        customScript?: string,\n        // optional sequence number to use for this input when using replace by fee (RBF)\n        sequence?: number,\n    }>;\n    // the serialized outputs as hex or the separate outputs specified by amount and outputScript or address. Note that\n    // if you are sending part of the funds back to an address as change, that output also needs to be included here.\n    // Arbitrary output types can be used, also differing from input type and among themselves. Input coins which are\n    // not sent to an output are considered fee.\n    outputs: string | Array<{\n        // amount in Satoshi; non-fractional positive number\n        amount: number,\n    } & ({\n        outputScript: string, // hex encoded serialized output script\n    } | {\n        // bitcoin recipient address. This address gets transformed into an output script. If you already have the\n        // output script available or a library loaded for calculating it, it's preferable to provide the outputScript\n        // instead of the address to avoid the need to load an additional library for conversion here.\n        address: string,\n    })>;\n    // optional bip32 path of potential change output. If your outputs include a change output back to this ledger, you\n    // should specify that key's bip32 path here such that the Ledger can verify the change output's correctness and\n    // doesn't need the user to confirm the change output. The change type can also be different than the input type.\n    changePath?: string;\n    // optional locktime; 0 by default\n    locktime?: number;\n    // optional hash type specifying how to sign the transaction, SIGHASH_DEFAULT (0x00) by default. Before changing\n    // this, make sure in https://github.com/LedgerHQ/app-bitcoin-new/blob/master/src/constants.h that your desired\n    // sigHashType is supported.\n    sigHashType?: number;\n    // Enforce input amount verification also for segwit inputs. Note that on Bitcoin app >= 1.4.0 a warning is\n    // displayed on the Ledger screen for unverified native segwit inputs and that for app versions < 1.4.0 setting\n    // useTrustedInputForSegwit is not supported. By default it's automatically set according to the connected app\n    // version. The newest @ledgerhq/hw-app-btc does not use this flag anymore for the BtcNew api.\n    useTrustedInputForSegwit?: false;\n}\n\nexport default class RequestSignTransactionBitcoin extends RequestBitcoin<string> {\n    public readonly type: RequestTypeBitcoin.SIGN_TRANSACTION = RequestTypeBitcoin.SIGN_TRANSACTION;\n    public readonly transaction: TransactionInfoBitcoin;\n    public readonly network: Exclude<Network, Network.DEVNET>;\n    private _inputType: AddressTypeBitcoin;\n\n    public get requiredApp(): string {\n        // The new Bitcoin app does not allow custom input scripts (for example custom witness scripts) unless an\n        // associated wallet policy had been registered. For this reason, we currently still require using the old api\n        // if custom input scripts are set.\n        if (!this.transaction.inputs.some(({ customScript }) => !!customScript)) return super.requiredApp;\n        if (this._coinAppConnection && this._coinAppConnection.app === super.requiredApp\n            && !RequestBitcoin._isNewApiSupported(this._coinAppConnection.app, this._coinAppConnection.appVersion)) {\n            // We're already connected to an appropriate Bitcoin app on which we don't use the new api, e.g. a Bitcoin\n            // app before 2.0. Thus, no need to specifically require the Legacy app variant.\n            return super.requiredApp;\n        }\n        return getLegacyApp(super.requiredApp); // require Legacy app variant\n    }\n\n    constructor(transaction: TransactionInfoBitcoin, expectedWalletId?: string) {\n        super(expectedWalletId);\n\n        this.transaction = transaction;\n\n        try {\n            const { inputs, outputs, changePath } = transaction;\n\n            if (!inputs.length) {\n                throw new Error('No inputs specified');\n            }\n            if (!outputs.length) {\n                throw new Error('No outputs specified');\n            }\n\n            // verify key paths\n            const keyPaths = [\n                ...inputs.map((input) => input.keyPath),\n                ...(changePath ? [changePath] : []),\n            ];\n            // Parent path of the keyPaths for the common account, equivalent to its computation in @ledgerhq/hw-app-btc\n            // createPaymentTransaction, stripping off the last two derivation levels.\n            let accountPath: string | null = null;\n            let network: Exclude<Network, Network.DEVNET> | null = null;\n            let inputType: AddressTypeBitcoin | null = null;\n            for (const keyPath of keyPaths) {\n                const parsedKeyPath = parseBip32Path(keyPath);\n                if (parsedKeyPath.coin !== Coin.BITCOIN) {\n                    throw new Error(`${keyPath} not a Bitcoin bip32 path following bip44`);\n                }\n\n                // Check whether all input and change keyPaths are from the same account, because that is a requirement\n                // of @ledgerhq/hw-app-btc's BtcNew's createPaymentTransaction because it only uses a single, simple\n                // wallet policy based on the common account xpub. Note that this check also ensures that all paths are\n                // on the same network and of the same input type, which is required because signing of inputs depends\n                // on param segwit and whether bech32 is set as an additional, i.e. all inputs are treated the same and\n                // signed according to these parameters, also in BtcOld. For different accountPaths, the transaction\n                // could be split and each input be signed separately, but that would be a lot of work.\n                // Outputs can be of arbitrary type. We also don't have to check the output network because they will be\n                // displayed on the Ledger screen and the user will spot differences.\n                if (accountPath && parsedKeyPath.accountPath !== accountPath) {\n                    const { app, appVersion } = this._coinAppConnection!;\n                    if (RequestBitcoin._isNewApiSupported(app, appVersion)) {\n                        // Not throwing because ledgerhq/hw-app-btc BtcNew will throw instead.\n                        console.error('All inputs and change must be from the same account. If this error is shown but '\n                            + 'signing succeeds, it means that this requirement has been removed from '\n                            + '@ledgerhq/hw-app-btc. Please notify us in that case.');\n                    } else {\n                        // BtcOld has the implicit requirement that all inputs are of the same network and address type,\n                        // see above, but does not throw. While change can be arbitrary for BtcOld, for simplification\n                        // we use the same single check.\n                        throw new Error('All inputs and change must be from the same account.');\n                    }\n                }\n                accountPath = parsedKeyPath.accountPath;\n                network = parsedKeyPath.network;\n                inputType = parsedKeyPath.addressType;\n            }\n            this.network = network!;\n            this._inputType = inputType!;\n        } catch (e) {\n            throw new ErrorState(\n                ErrorType.REQUEST_ASSERTION_FAILED,\n                `Invalid request: ${e instanceof Error ? e.message : e}`,\n                this,\n            );\n        }\n\n        // Preload Bitcoin lib if needed. Ledger Bitcoin api is already preloaded by parent class. Ignore errors.\n        this._loadBitcoinLibIfNeeded().catch(() => {});\n    }\n\n    public async call(transport: Transport): Promise<string> {\n        // Resources:\n        // - to learn more about scripts and how input and output script relate to each other:\n        //   https://en.bitcoin.it/wiki/Script\n        // - to learn more about transactions in general, what they include and their encoding:\n        //   https://en.bitcoin.it/wiki/Transaction\n        // - code for decoding of transactions for a deeper understanding:\n        //   https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/ts_src/transaction.ts (BitcoinJS)\n        //   https://github.com/LedgerHQ/ledger-live/blob/main/libs/ledgerjs/packages/hw-app-btc/src/splitTransaction.ts\n        //   (parsing into Ledger's representation. Code is a bit messy.)\n        // - Ledger's notion of trusted inputs to connect inputs to their amount in a trusted fashion by rehashing the\n        //   input transaction:\n        //   https://bitcoinmagazine.com/articles/how-segregated-witness-is-about-to-fix-hardware-wallets-1478110057\n        //   https://medium.com/segwit-co/segregated-witness-and-hardware-wallets-cc88ba532fb3\n        // - A write-up about the Bitcoin app's switch to using partially signed Bitcoin transactions (psbt) with 2.0.0:\n        //   https://blog.ledger.com/bitcoin-2/\n        //   The new Bitcoin api was introduced with 2.0.0, while the legacy api was still supported until 2.1.0.\n        // - @ledgerhq/hw-app-btc (the client lib) documentation:\n        //   https://github.com/LedgerHQ/ledger-live/tree/main/libs/ledgerjs/packages/hw-app-btc\n        // - @ledgerhq/hw-app-btc still contains the deprecated code for old Bitcoin apps before 2.0.0:\n        //   https://github.com/LedgerHQ/ledger-live/blob/main/libs/ledgerjs/packages/hw-app-btc/src/BtcOld.ts\n        //   The client code for the new Bitcoin apps can be found here:\n        //   https://github.com/LedgerHQ/ledger-live/blob/main/libs/ledgerjs/packages/hw-app-btc/src/BtcNew.ts\n        //   Additionally, the repository of the Ledger Bitcoin App contains another js client written from ground up,\n        //   which better supports the new api:\n        //   https://github.com/LedgerHQ/app-bitcoin-new/tree/develop/bitcoin_client_js\n        // - @ledgerhq/hw-app-btc legacy transaction building and signing logic:\n        //   https://github.com/LedgerHQ/ledger-live/blob/main/libs/ledgerjs/packages/hw-app-btc/src/createTransaction\n        //   The transaction building and signing logic for new Bitcoin app based on psbts is contained within BtcNew.ts\n        // - Ledger Bitcoin App's api description:\n        //   https://github.com/LedgerHQ/app-bitcoin-new/blob/master/doc/bitcoin.md\n        // - @ledgerhq/hw-app-btc's tests to see an example of correctly sent data:\n        //   https://github.com/LedgerHQ/app-bitcoin-new/tree/master/tests\n        // - For decoding transactions:\n        //   https://live.blockcypher.com/btc/decodetx/\n        // - The demo page and code of this lib for demo usage\n\n        const [api, bitcoinLib] = await Promise.all([\n            // these throw LOADING_DEPENDENCIES_FAILED on failure\n            this._getLowLevelApi(transport),\n            this._loadBitcoinLibIfNeeded(),\n        ]);\n        let parsedTransaction: CreateTransactionArg;\n\n        try {\n            // parse into Ledger's CreateTransactionArg format\n            const {\n                inputs,\n                outputs,\n                changePath,\n                locktime,\n                sigHashType,\n                useTrustedInputForSegwit,\n            } = this.transaction;\n\n            parsedTransaction = {\n                inputs: inputs.map(({ transaction, index, customScript, sequence }) => [\n                    api.splitTransaction(\n                        typeof transaction === 'string' ? transaction : transaction.toHex(),\n                        // Set segwit support always to true because then transactions with and without witnesses are\n                        // correctly parsed (compare bitcoinjs/transaction). Also we can't set it depending on whether\n                        // our own input (transaction's output) is not segwit because it's input might be. Specifically\n                        // fixes parsing legacy inputs which came from segwit inputs.\n                        true,\n                    ),\n                    index,\n                    customScript || null,\n                    sequence || null,\n                ]),\n                associatedKeysets: inputs.map(({ keyPath }) => keyPath),\n                outputScriptHex: typeof outputs === 'string'\n                    ? outputs\n                    : (api.serializeTransactionOutputs as FixedSerializeTransactionOutputs)({\n                        outputs: outputs.map((output) => {\n                            // inspired by how outputs are encoded in __toBuffer in bitcoinjs-lib/transaction.ts\n                            const { amount } = output;\n                            if (Math.floor(amount) !== amount || amount < 0 || amount > 21e9) {\n                                throw new Error(`Invalid Satoshi amount: ${amount}`);\n                            }\n                            const amountBuffer = Buffer.alloc(8);\n                            amountBuffer.writeInt32LE(amount & -1, 0); // eslint-disable-line no-bitwise\n                            amountBuffer.writeUInt32LE(Math.floor(amount / 0x100000000), 4);\n\n                            let outputScript: Buffer;\n                            if ('outputScript' in output) {\n                                outputScript = Buffer.from(output.outputScript, 'hex');\n                            } else {\n                                outputScript = bitcoinLib!.address.toOutputScript(\n                                    output.address,\n                                    this.network === Network.MAINNET\n                                        ? bitcoinLib!.networks.bitcoin\n                                        : bitcoinLib!.networks.testnet,\n                                );\n                            }\n                            return { amount: amountBuffer, script: outputScript };\n                        }),\n                    }).toString('hex'),\n                segwit: this._inputType !== AddressTypeBitcoin.LEGACY,\n                additionals: this._inputType === AddressTypeBitcoin.NATIVE_SEGWIT ? ['bech32'] : [],\n            };\n\n            // Set optional properties. Note that we did not use ...this.transaction via object spreading above to avoid\n            // setting properties to undefined for which the default values would not be applied anymore in the api call\n            if (changePath !== undefined && changePath !== null) {\n                parsedTransaction.changePath = changePath;\n            }\n            if (locktime !== undefined && locktime !== null) {\n                parsedTransaction.lockTime = locktime;\n            }\n            if (sigHashType !== undefined && sigHashType !== null) {\n                parsedTransaction.sigHashType = sigHashType;\n            }\n            if (useTrustedInputForSegwit !== undefined && useTrustedInputForSegwit !== null) {\n                parsedTransaction.useTrustedInputForSegwit = useTrustedInputForSegwit;\n            }\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e instanceof Error ? e : String(e), this);\n        }\n\n        // Note: We make api calls outside of the try...catch block to let the exceptions fall through such that\n        // _callLedger can decide how to behave depending on the api error.\n        return api.createPaymentTransaction(parsedTransaction);\n    }\n\n    private async _loadBitcoinLibIfNeeded(): Promise<null | BitcoinLib> {\n        // If we need bitcoinjs for address to output script conversion, load it.\n        if (Array.isArray(this.transaction.outputs)\n            && this.transaction.outputs.some((output) => 'address' in output && !!output.address)) {\n            return this._loadBitcoinLib();\n        }\n        return null;\n    }\n}\n"],"names":["Buffer"],"mappings":"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"}