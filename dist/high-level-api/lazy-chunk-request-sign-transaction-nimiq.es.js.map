{"version":3,"file":"lazy-chunk-request-sign-transaction-nimiq.es.js","sources":["source-mapped://source-mapped/src/high-level-api/requests/nimiq/request-sign-transaction-nimiq.ts"],"sourcesContent":["import RequestWithKeyPathNimiq from './request-with-key-path-nimiq';\nimport { RequestTypeNimiq, Network, NetworkIdNimiq, AccountTypeNimiq, TransactionFlagsNimiq } from '../../constants';\nimport ErrorState, { ErrorType } from '../../error-state';\nimport { NimiqVersion } from '../../../lib/constants';\nimport { isNimiqLegacy, isNimiqLegacyPrimitive, type NimiqPrimitive } from '../../../lib/load-nimiq';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nexport type TransactionInfoNimiq<Version extends NimiqVersion> = {\n    sender: NimiqPrimitive<'Address', Version>,\n    recipient: NimiqPrimitive<'Address', Version>,\n    validityStartHeight: number,\n    network?: Network,\n    flags?: number,\n} & (Version extends NimiqVersion.ALBATROSS ? {\n    value: bigint, // In Luna\n    fee?: bigint,\n    senderType?: AccountTypeNimiq,\n    senderData?: Uint8Array,\n    recipientType?: AccountTypeNimiq,\n    recipientData?: Uint8Array,\n} : {\n    value: number, // In Luna\n    fee?: number,\n    senderType?: Exclude<AccountTypeNimiq, AccountTypeNimiq.STAKING>,\n    recipientType?: Exclude<AccountTypeNimiq, AccountTypeNimiq.STAKING>,\n    extraData?: Uint8Array,\n});\n\nfunction isTransactionInfoNimiqLegacy(transactionInfo: TransactionInfoNimiq<NimiqVersion>)\n    : transactionInfo is TransactionInfoNimiq<NimiqVersion.LEGACY> {\n    return isNimiqLegacyPrimitive<'Address'>(transactionInfo.sender)\n        && isNimiqLegacyPrimitive<'Address'>(transactionInfo.recipient);\n}\n\nexport default class RequestSignTransactionNimiq<Version extends NimiqVersion>\n    extends RequestWithKeyPathNimiq<Version, NimiqPrimitive<'Transaction', Version>> {\n    public readonly type: RequestTypeNimiq.SIGN_TRANSACTION;\n    public readonly transaction: TransactionInfoNimiq<Version>;\n\n    public get minRequiredAppVersion(): string {\n        return this.nimiqVersion === NimiqVersion.ALBATROSS\n            ? '2.0' // first version supporting Albatross transactions\n            : super.minRequiredAppVersion;\n    }\n\n    constructor(\n        nimiqVersion: Version,\n        keyPath: string,\n        transaction: TransactionInfoNimiq<Version>,\n        expectedWalletId?: string,\n    ) {\n        const type = RequestTypeNimiq.SIGN_TRANSACTION;\n        super(nimiqVersion, keyPath, expectedWalletId, { type });\n        this.type = type;\n        this.transaction = transaction;\n\n        // Preload Nimiq lib. Ledger Nimiq api is already preloaded by parent class. Ignore errors.\n        this._loadNimiq().catch(() => {});\n    }\n\n    public async call(transport: Transport): Promise<NimiqPrimitive<'Transaction', Version>> {\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        // Note: We make api calls outside of try...catch blocks to let the exceptions fall through such that\n        // _callLedger can decide how to behave depending on the api error. All other errors are converted to\n        // REQUEST_ASSERTION_FAILED errors which stop the execution of the request.\n        const { publicKey: signerPubKeyBytes } = await api.getPublicKey(\n            this.keyPath,\n            true, // validate\n            false, // display\n            this.nimiqVersion,\n        );\n\n        const Nimiq = await this._loadNimiq(); // throws LOADING_DEPENDENCIES_FAILED on failure\n\n        let nimiqTx: NimiqPrimitive<'Transaction', NimiqVersion>;\n        try {\n            const tx = this.transaction as\n                TransactionInfoNimiq<NimiqVersion.ALBATROSS> | TransactionInfoNimiq<NimiqVersion.LEGACY>;\n\n            const senderType = tx.senderType !== undefined && tx.senderType !== null\n                ? tx.senderType\n                : AccountTypeNimiq.BASIC;\n\n            const recipientType = tx.recipientType !== undefined && tx.recipientType !== null\n                ? tx.recipientType\n                : AccountTypeNimiq.BASIC;\n\n            let networkId: number;\n            let { network } = tx;\n            if (isNimiqLegacy(Nimiq)) {\n                if (!network) {\n                    try {\n                        network = Nimiq.GenesisConfig.NETWORK_NAME as Network;\n                    } catch (e) {\n                        // Genesis config not initialized\n                        network = Network.MAINNET;\n                    }\n                }\n                const genesisConfig = Nimiq.GenesisConfig.CONFIGS[network];\n                networkId = genesisConfig.NETWORK_ID;\n            } else {\n                if (!network) {\n                    network = /testnet|localhost|bs-local\\.com/.test(window.location.hostname)\n                        ? Network.TESTNET\n                        : Network.MAINNET;\n                }\n                networkId = NetworkIdNimiq[network];\n            }\n\n            const flags = tx.flags !== undefined && tx.flags !== null ? tx.flags : TransactionFlagsNimiq.NONE;\n            const fee = tx.fee || 0;\n\n            if (isNimiqLegacy(Nimiq) && isTransactionInfoNimiqLegacy(tx)) {\n                if ((tx.extraData && tx.extraData.length !== 0)\n                    || senderType !== Nimiq.Account.Type.BASIC\n                    || recipientType !== Nimiq.Account.Type.BASIC\n                    || flags !== Nimiq.Transaction.Flag.NONE\n                ) {\n                    const extraData = tx.extraData ? tx.extraData : new Uint8Array(0);\n                    nimiqTx = new Nimiq.ExtendedTransaction(\n                        tx.sender, senderType as NonNullable<typeof tx.senderType>,\n                        tx.recipient, recipientType as NonNullable<typeof tx.recipientType>,\n                        tx.value, Number(fee), tx.validityStartHeight, flags, extraData,\n                        /* proof */ undefined, networkId,\n                    );\n                } else {\n                    const signerPubKey = new Nimiq.PublicKey(signerPubKeyBytes);\n                    nimiqTx = new Nimiq.BasicTransaction(\n                        signerPubKey, tx.recipient,\n                        tx.value, Number(fee), tx.validityStartHeight,\n                        /* signature */ undefined, networkId,\n                    );\n                }\n            } else if (!isNimiqLegacy(Nimiq) && !isTransactionInfoNimiqLegacy(tx)) {\n                nimiqTx = new Nimiq.Transaction(\n                    tx.sender, senderType, tx.senderData,\n                    tx.recipient, recipientType, tx.recipientData,\n                    tx.value, BigInt(fee), tx.flags,\n                    tx.validityStartHeight, networkId,\n                );\n            } else {\n                throw new Error('Invalid transactionInfo');\n            }\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e instanceof Error ? e : String(e), this);\n        }\n\n        const {\n            signature: signatureBytes,\n            stakerSignature: stakerSignatureBytes,\n        } = this.nimiqVersion === NimiqVersion.LEGACY\n            ? await api.signTransaction(\n                this.keyPath,\n                nimiqTx.serializeContent(),\n                this.nimiqVersion,\n                this._coinAppConnection?.appVersion,\n            )\n            : await api.signTransaction(\n                this.keyPath,\n                nimiqTx.serializeContent(),\n                this.nimiqVersion,\n            );\n\n        try {\n            if (isNimiqLegacy(Nimiq)) {\n                const signature = new Nimiq.Signature(signatureBytes);\n                if (stakerSignatureBytes) throw new Error('Unexpected staker signature on legacy transaction');\n                if (nimiqTx instanceof Nimiq.BasicTransaction) {\n                    nimiqTx.signature = signature;\n                } else {\n                    const signerPubKey = new Nimiq.PublicKey(signerPubKeyBytes);\n                    nimiqTx.proof = Nimiq.SignatureProof.singleSig(signerPubKey, signature).serialize();\n                }\n            } else {\n                const signerPubKey = new Nimiq.PublicKey(signerPubKeyBytes);\n                const signature = Nimiq.Signature.deserialize(signatureBytes);\n                nimiqTx.proof = Nimiq.SignatureProof.singleSig(signerPubKey, signature).serialize();\n                if (stakerSignatureBytes) {\n                    // The Ledger app created a staker signature, which means it's a staking transaction with a staker\n                    // signature proof in its recipient data but for which the empty default signature proof was passed,\n                    // such that the Ledger created the staker signature with the same private key as staker private key\n                    // as the transaction sender key.\n                    const stakerSignature = Nimiq.Signature.deserialize(stakerSignatureBytes);\n                    const stakerSignatureProof = Nimiq.SignatureProof.singleSig(signerPubKey, stakerSignature);\n                    // Overwrite the empty default signature proof in the staking transaction's recipient data. The\n                    // signature proof is always at the very end of the recipient data, for recipient data which include\n                    // a signature proof. Note that both, the empty default signature proof and the staker signature\n                    // proof created by the Ledger app are basic single signature proofs of the same size.\n                    const stakerSignatureProofBytes = stakerSignatureProof.serialize();\n                    if (nimiqTx.data.length < stakerSignatureProofBytes.length) {\n                        throw new Error('Failed to overwrite staker signature proof');\n                    }\n                    nimiqTx.data.set(stakerSignatureProofBytes, nimiqTx.data.length - stakerSignatureProofBytes.length);\n                    console.info('The staker signature proof was auto-generated and overwritten.');\n                }\n            }\n        } catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, e instanceof Error ? e : String(e), this);\n        }\n\n        return nimiqTx as NimiqPrimitive<'Transaction', Version>;\n    }\n}\n"],"names":[],"mappings":"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"}