{"version":3,"file":"low-level-api.es.js","sources":["source-mapped://source-mapped/src/lib/constants.ts","source-mapped://source-mapped/src/lib/load-nimiq.ts","source-mapped://source-mapped/src/low-level-api/low-level-api-utils.ts","source-mapped://source-mapped/src/low-level-api/get-app-name-and-version.ts","source-mapped://source-mapped/src/low-level-api/low-level-api.ts"],"sourcesContent":["// Constant shared between the low-level-api and the high-level-api.\n// As a separate file to be able to use these constants in the main chunk without the need to import the entire lazy\n// chunks of the low level api, and to avoid circular dependencies between main entry and other files.\n\nexport enum NimiqVersion {\n    ALBATROSS = 'albatross',\n    LEGACY = 'legacy',\n}\n","import { NimiqVersion } from '../lib/constants';\n\n// Note: @nimiq/albatross-wasm is mapped to @nimiq/core@next in package.json. @nimiq/albatross-wasm is the name that the\n// Nimiq Hub uses, which is why we use it here, too.\nexport type Nimiq<Version extends NimiqVersion> = Version extends NimiqVersion.ALBATROSS\n    ? typeof import('@nimiq/albatross-wasm')\n    : typeof import('@nimiq/core-web');\n\n// Accessor for primitives that exist in Nimiq Legacy and Nimiq Albatross under the same name.\ntype CommonPrimitives = Extract<keyof typeof import('@nimiq/albatross-wasm'), keyof typeof import('@nimiq/core-web')>;\nexport type NimiqPrimitive<\n    Primitive extends CommonPrimitives,\n    Version extends NimiqVersion,\n> = InstanceType<Nimiq<Version>[Primitive]>;\n\nexport function isNimiqLegacy(core: Nimiq<NimiqVersion>): core is Nimiq<NimiqVersion.LEGACY> {\n    // Note that checking for core.Version.CORE_JS_VERSION would be nicer, but it's unfortunately not available in the\n    // web-offline variant.\n    return 'GenesisConfig' in core && core.GenesisConfig.CONFIGS.main.NETWORK_ID === 42;\n}\n\nexport function isNimiqLegacyPrimitive<Primitive extends CommonPrimitives = /* enforce specifying manually */ never>(\n    primitive: NimiqPrimitive<Primitive, NimiqVersion>,\n): primitive is NimiqPrimitive<Primitive, NimiqVersion.LEGACY> {\n    return !('__destroy_into_raw' in primitive || '__wrap' in primitive.constructor);\n}\n\nexport async function loadNimiq<Version extends NimiqVersion>(\n    nimiqVersion: Version,\n    inlcudeNimiqLegacyCryptography: boolean,\n    preloadWasm = true,\n): Promise<Nimiq<Version>> {\n    const [Nimiq] = await Promise.all(nimiqVersion === NimiqVersion.ALBATROSS\n        ? [loadNimiqAlbatrossCore(preloadWasm)]\n        : [\n            loadNimiqLegacyCore(),\n            ...(inlcudeNimiqLegacyCryptography ? [loadNimiqLegacyCryptography(preloadWasm)] : []),\n        ],\n    );\n    return Nimiq as Nimiq<Version>;\n}\n\ndeclare module './load-nimiq' {\n    // Nimiq Hub defines globals Nimiq and loadAlbatross, which we'll use for special treatment if running in the Hub\n    // (the main consumer of this ledger-api). Although they are in fact global variables in the Hub, we don't do a\n    // global type augmentation here, to not pollute the global scope for others and to discourage usage of the globals\n    // within this library.\n    const Nimiq: undefined | Nimiq<NimiqVersion.LEGACY>;\n    const loadAlbatross: undefined | (() => Promise<{\n        Client: Nimiq<NimiqVersion.ALBATROSS>['Client'],\n        ClientConfiguration: Nimiq<NimiqVersion.ALBATROSS>['ClientConfiguration'],\n    }>);\n\n    // Integrity hash is defined in rollup.config.js.\n    const __nimiqLegacyCoreWasmIntegrityHash__: string; // eslint-disable-line @typescript-eslint/naming-convention\n}\n\nconst isNimiqAlbatrossHub = typeof loadAlbatross !== 'undefined' && (\n    // Running on Hub domain.\n    /^hub\\.(?:pos\\.)?nimiq(?:-testnet)?\\.com$/.test(window.location.hostname)\n    // Or running on localhost:8081 or BrowserStack's bs-local.com:8081 which is where Hub dev versions are run.\n    || /^(?:localhost|bs-local\\.com):8081$/.test(window.location.host)\n);\nconst nimiqCoreBasePath = isNimiqAlbatrossHub\n    // On a Nimiq Hub with Albatross support, use the Hub's copy of the core (copied from @nimiq/albatross-wasm in the\n    // Hub's vue.config.js, which is an alias for @nimiq/core@next), same as the Hub itself is doing, to avoid using and\n    // loading an additional version.\n    ? '/albatross-client/web/'\n    // In other cases load @nimiq/core-web@next from jsdelivr. Load from cdn to avoid bundling a copy of core if it's\n    // not needed. This way, we also don't need to handle the wasm file in the rollup config.\n    : 'https://cdn.jsdelivr.net/npm/@nimiq/core@next/web/';\nlet nimiqCorePromise: Promise<Nimiq<NimiqVersion.ALBATROSS>> | null = null;\n\nasync function loadNimiqAlbatrossCore(preloadWasm = true): Promise<Nimiq<NimiqVersion.ALBATROSS>> {\n    nimiqCorePromise = nimiqCorePromise || (async () => {\n        try {\n            if (preloadWasm) {\n                // Preload wasm in parallel. We only need the main wasm, not the Client or worker.\n                // No integrity hash here, because main-wasm/index.js loads the wasm without integrity hash.\n                preloadAsset(`${nimiqCoreBasePath}main-wasm/index_bg.wasm`, 'fetch', true);\n            }\n\n            // Note: we don't import /web/index.js or run the Hub's loadAlbatross because we don't need the Client which\n            // depends on and loads the worker, including the worker wasm, and is auto-instantiated in /web/index.js. We\n            // only load the main wasm handler and initialize it, which loads the main wasm. Note that these are the\n            // exact same files as loaded by the Hub, i.e. there is no double loading happening as files will be already\n            // cached. Also, calling init again when the wasm is already initialized, does not unnecessarily initialize\n            // or fetch anything again.\n            const Nimiq = await import(`${nimiqCoreBasePath}main-wasm/index.js`);\n            const { default: init } = Nimiq;\n            await init();\n            return Nimiq;\n        } catch (e) {\n            nimiqCorePromise = null;\n            throw e;\n        }\n    })();\n    return nimiqCorePromise;\n}\n\nconst nimiqLegacyCoreBasePath = window.location.hostname.endsWith('.nimiq.com')\n    // On the nimiq.com domain use cdn.nimiq.com.\n    ? 'https://cdn.nimiq.com/'\n    // On other domains use jsdelivr instead of nimiq cdn to avoid getting blocked by ad blockers.\n    : 'https://cdn.jsdelivr.net/npm/@nimiq/core-web/';\nlet nimiqLegacyCorePromise: Promise<Nimiq<NimiqVersion.LEGACY>> | null = null;\nlet nimiqLegacyCryptographyPromise: Promise<void> | null = null;\n\n/**\n * Lazy-load the Nimiq core api from the cdn server if it's not loaded yet.\n */\nasync function loadNimiqLegacyCore(coreVariant: 'web' | 'web-offline' = 'web-offline')\n    : Promise<Nimiq<NimiqVersion.LEGACY>> {\n    // Return global Nimiq if already loaded from @nimiq/core-web, for example in Nimiq Hub.\n    if (typeof Nimiq !== 'undefined') return Nimiq;\n\n    nimiqLegacyCorePromise = nimiqLegacyCorePromise || new Promise<void>((resolve, reject) => {\n        console.warn('Support for Nimiq Legacy is deprecated and will be removed in the future.');\n        const $head = document.getElementsByTagName('head')[0];\n        const $script = document.createElement('script');\n        $script.type = 'text/javascript';\n        $script.onload = () => {\n            $script.parentNode!.removeChild($script);\n            resolve();\n        };\n        $script.onerror = (e) => {\n            $script.parentNode!.removeChild($script);\n            reject(e);\n        };\n        $script.src = `${nimiqLegacyCoreBasePath}${coreVariant}.js`;\n        $head.appendChild($script);\n    }).then(\n        () => Nimiq!, // The Nimiq global has been set by the legacy Core.\n        (e) => {\n            nimiqLegacyCorePromise = null;\n            return Promise.reject(e);\n        },\n    );\n    return nimiqLegacyCorePromise;\n}\n\n/**\n * Load the WebAssembly and module for cryptographic functions. You will have to do this before calculating hashes,\n * deriving keys or addresses, signing transactions or messages, etc.\n */\nasync function loadNimiqLegacyCryptography(preloadWasm = true): Promise<void> {\n    nimiqLegacyCryptographyPromise = nimiqLegacyCryptographyPromise || (async () => {\n        try {\n            if (preloadWasm) {\n                // Preload wasm and wasm handler in parallel.\n                preloadAsset(`${nimiqLegacyCoreBasePath}worker-wasm.wasm`, 'fetch', true);\n                preloadAsset(\n                    `${nimiqLegacyCoreBasePath}worker-wasm.js`,\n                    'script',\n                    true,\n                    __nimiqLegacyCoreWasmIntegrityHash__,\n                );\n            }\n\n            const NimiqLegacy = await loadNimiqLegacyCore();\n            // Note: this will not import the wasm again if it has already been imported, for example by the parent app.\n            await NimiqLegacy.WasmHelper.doImport();\n        } catch (e) {\n            nimiqLegacyCryptographyPromise = null;\n            throw e;\n        }\n    })();\n    return nimiqLegacyCryptographyPromise;\n}\n\nfunction preloadAsset(asset: string, as: string, crossOrigin?: boolean, integrity?: string) {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = as;\n    link.href = asset;\n    link.onload = link.onerror = () => document.head.removeChild(link); // eslint-disable-line no-multi-assign\n    if (crossOrigin) link.crossOrigin = '';\n    if (integrity) link.integrity = integrity;\n    document.head.appendChild(link);\n}\n","import { NimiqVersion } from '../lib/constants';\nimport { isNimiqLegacy, loadNimiq } from '../lib/load-nimiq';\n\nexport function parsePath(path: string): Buffer {\n    if (!path.startsWith('44\\'/242\\'')) {\n        throw new Error(\n            `Not a Nimiq BIP32 path. Path: ${path}. The Nimiq app is authorized only for paths starting with 44'/242'. `\n            + ' Example: 44\\'/242\\'/0\\'/0\\'',\n        );\n    }\n\n    const pathParts: number[] = path.split('/').map((part) => {\n        let number = parseInt(part, 10);\n        if (Number.isNaN(number)) {\n            throw new Error(`Invalid path: ${path}`);\n        }\n        if (part.endsWith('\\'')) {\n            number += 0x80000000;\n        } else {\n            throw new Error(\n                'Detected a non-hardened path element in requested BIP32 path.'\n                + ' Non-hardended paths are not supported at this time. Please use an all-hardened path.'\n                + ' Example: 44\\'/242\\'/0\\'/0\\'',\n            );\n        }\n        return number;\n    });\n\n    const pathBuffer = Buffer.alloc(1 + pathParts.length * 4);\n    pathBuffer[0] = pathParts.length;\n    pathParts.forEach((element, index) => {\n        pathBuffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return pathBuffer;\n}\n\nexport async function publicKeyToAddress(publicKey: Buffer, nimiqVersion: NimiqVersion): Promise<string> {\n    // Cryptography is needed for hashing public key to an address.\n    const Nimiq = await loadNimiq(nimiqVersion, /* include cryptography */ true);\n    return new Nimiq.PublicKey(publicKey).toAddress().toUserFriendlyAddress();\n}\n\nexport async function verifySignature(\n    data: Buffer | Uint8Array,\n    signature: Buffer | Uint8Array,\n    publicKey: Buffer | Uint8Array,\n    nimiqVersion: NimiqVersion,\n): Promise<boolean> {\n    // Cryptography is needed for verifying signatures.\n    const Nimiq = await loadNimiq(nimiqVersion, /* include cryptography */ true);\n    if (isNimiqLegacy(Nimiq)) {\n        const nimiqSignature = new Nimiq.Signature(signature);\n        const nimiqPublicKey = new Nimiq.PublicKey(publicKey);\n        return nimiqSignature.verify(nimiqPublicKey, data);\n    } else {\n        const nimiqSignature = Nimiq.Signature.deserialize(signature);\n        const nimiqPublicKey = new Nimiq.PublicKey(publicKey);\n        return nimiqPublicKey.verify(nimiqSignature, data);\n    }\n}\n","type Transport = import('@ledgerhq/hw-transport').default;\n\n// Also see developers.ledger.com/docs/transport/open-close-info-on-apps/, github.com/LedgerHQ/ledgerjs/issues/365 and\n// github.com/LedgerHQ/ledger-secure-sdk/blob/master/src/os_io_seproxyhal.c for other interesting requests.\n\nexport default async function getAppNameAndVersion(transport: Transport, scrambleKey: string, withApiLock = true)\n    : Promise<{ name: string, version: string }> {\n    // Taken from @ledgerhq/hw-app-btc/getAppAndVersion.js. We don't import it directly from there to avoid loading its\n    // unnecessary dependencies. Note that this request is common to all apps and the dashboard and is no Bitcoin app\n    // specific request (it's not on https://github.com/LedgerHQ/app-bitcoin-new/blob/master/doc/bitcoin.md but in the\n    // Ledger SDKs, see https://github.com/LedgerHQ/ledger-secure-sdk/blob/master/src/os_io_seproxyhal.c. Also mind the\n    // different cla). However, for u2f and WebAuthn the used scramble key must match the one of the connected app for\n    // the Ledger to answer the request. Therefore, set the scrambleKey manually to make it compatible with all apps,\n    // not only the Nimiq app.\n    let getAppNameAndVersionHandler = async () => {\n        // Note that no u2f heartbeat is required here as the call is not interactive but answers directly.\n        const response = await transport.send(0xb0, 0x01, 0x00, 0x00);\n        const status = response.slice(response.length - 2).readUInt16BE(0);\n        if (status !== 0x9000) throw new Error('getAppNameAndVersion failed'); // should not actually happen\n        let offset = 0;\n        const format = response[offset++];\n        if (format !== 1) throw new Error('Unsupported format');\n        const nameLength = response[offset++];\n        const name = response.slice(offset, (offset += nameLength)).toString('ascii');\n        const versionLength = response[offset++];\n        const version = response.slice(offset, (offset += versionLength)).toString('ascii');\n        return { name, version };\n    };\n    // Set the scramble key and enable the api lock (for ledger busy errors) if requested. Note that the lock is a\n    // property of the transport, not the handler, thus work correctly across multiple independently decorated\n    // getAppNameAndVersionHandler and other decorated methods. Also, other decorated methods always overwrite the\n    // scramble key to their required key on each invocation, such that setting it here won't affect other api calls.\n    if (withApiLock) {\n        // Decorating the api method does not modify the transport instance, therefore decorating on each invocation of\n        // getAppNameAndVersion does no harm.\n        getAppNameAndVersionHandler = transport.decorateAppAPIMethod(\n            'getAppNameAndVersionHandler',\n            getAppNameAndVersionHandler,\n            undefined,\n            scrambleKey,\n        );\n    } else {\n        // Setting the scramble key manually does no harm, as any decorated api method will overwrite it again.\n        transport.setScrambleKey(scrambleKey);\n    }\n    return getAppNameAndVersionHandler();\n}\n","import { parsePath, publicKeyToAddress, verifySignature } from './low-level-api-utils';\nimport getAppNameAndVersion from './get-app-name-and-version';\nimport { NimiqVersion } from '../lib/constants';\nimport { loadNimiq } from '../lib/load-nimiq';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nconst CLA = 0xe0;\nconst INS_GET_PK = 0x02;\nconst INS_SIGN_TX = 0x04;\nconst INS_KEEP_ALIVE = 0x08;\nconst INS_SIGN_MESSAGE = 0x0a;\n\nconst APDU_MAX_SIZE = 255; // see IO_APDU_BUFFER_SIZE in os.h in ledger sdk\nconst P1_FIRST_APDU = 0x00;\nconst P1_MORE_APDU = 0x80;\nconst P1_NO_VALIDATE = 0x00;\nconst P1_VALIDATE = 0x01;\nconst P2_LAST_APDU = 0x00;\nconst P2_MORE_APDU = 0x80;\nconst P2_NO_CONFIRM = 0x00;\nconst P2_CONFIRM = 0x01;\n\nconst MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HEX = 1 << 0; // eslint-disable-line no-bitwise\nconst MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HASH = 1 << 1; // eslint-disable-line no-bitwise\n\n// Definition of common status words:\n// - https://github.com/LedgerHQ/ledger-secure-sdk/blob/master/include/errors.h\n// - https://github.com/LedgerHQ/app-bitcoin-new/blob/master/src/boilerplate/sw.h\n// - https://github.com/LedgerHQ/app-bitcoin/blob/master/include/btchip_apdu_constants.h\n// - https://ledgerhq.github.io/btchip-doc/bitcoin-technical-beta.html#_status_words\nconst SW_OK = 0x9000;\nconst SW_CANCEL = 0x6985;\nconst SW_KEEP_ALIVE = 0x6e02;\n\nconst U2F_SCRAMBLE_KEY = 'w0w';\n\n// The @ledgerhq libraries use Node Buffers which need to be polyfilled in the browser. To avoid the need to bundle such\n// polyfills that an app likely already has bundled in the @ledgerhq libraries, this library expects a global polyfill\n// declared on window.\ndeclare global {\n    interface Window {\n        Buffer?: typeof Buffer;\n    }\n}\n\n/**\n * Nimiq API\n *\n * Low level api for communication with the Ledger wallet Nimiq app. This lib is compatible with all @ledgerhq/transport\n * libraries but does on the other hand not include optimizations for specific transport types and returns raw bytes.\n *\n * This library is in nature similar to other hw-app packages in @ledgerhq/ledgerjs and partially based on their code,\n * licenced under the Apache 2.0 licence.\n *\n * @example\n * const nim = new LowLevelApi(transport)\n */\nexport default class LowLevelApi {\n    private _transport: Transport;\n\n    constructor(transport: Transport) {\n        this._transport = transport;\n        // Note that getAppNameAndVersion does not need to be decorated, as we're decorating it manually. Also note that\n        // the registered methods here do not intersect with the methods of the Bitcoin api, therefore, we can re-use\n        // the same transport instance for both, NIM and BTC apis (as long as a switch between NIM and BTC apps doesn't\n        // cause a disconnect).\n        transport.decorateAppAPIMethods(\n            this,\n            ['getPublicKey', 'signTransaction'],\n            U2F_SCRAMBLE_KEY,\n        );\n    }\n\n    public get transport(): Transport {\n        return this._transport;\n    }\n\n    /**\n     * Close the transport instance. Note that this does not emit a disconnect. Disconnects are only emitted when the\n     * device actually disconnects (or switches it's descriptor which happens when switching to the dashboard or apps).\n     */\n    public async close() {\n        try {\n            await this._transport.close();\n        } catch (e) {\n            // Ignore. Transport might already be closed.\n        }\n    }\n\n    /**\n     * Get the name of the connected app and the app version.\n     * @returns An object with the name and version.\n     * @example\n     * nim.getAppNameAndVersion().then(o => o.version)\n     */\n    public async getAppNameAndVersion(): Promise<{ name: string, version: string }> {\n        return getAppNameAndVersion(this._transport, U2F_SCRAMBLE_KEY);\n    }\n\n    /**\n     * Get Nimiq address for a given BIP 32 path.\n     * @param path - A path in BIP 32 format.\n     * @param [boolValidate] - Optionally enable key pair validation.\n     * @param [boolDisplay] - Optionally display the address on the ledger.\n     * @param [nimiqVersion] - Optionally choose which Nimiq library version to use for internal computations.\n     * @returns An object with the address.\n     * @example\n     * nim.getAddress(\"44'/242'/0'/0'\").then(o => o.address)\n     */\n    public async getAddress(\n        path: string,\n        boolValidate: boolean = true,\n        boolDisplay: boolean = false,\n        nimiqVersion: NimiqVersion = NimiqVersion.ALBATROSS,\n    ): Promise<{ address: string }> {\n        // Start loading Nimiq core later needed for hashing public key to address and optional validation.\n        loadNimiq(nimiqVersion, /* include cryptography */ true).catch(() => {});\n\n        const { publicKey } = await this.getPublicKey(path, boolValidate, boolDisplay, nimiqVersion);\n        const address = await publicKeyToAddress(Buffer.from(publicKey), nimiqVersion);\n        return { address };\n    }\n\n    /**\n     * Get Nimiq public key for a given BIP 32 path.\n     * @param path - A path in BIP 32 format.\n     * @param [boolValidate] - Optionally enable key pair validation.\n     * @param [boolDisplay] - Optionally display the corresponding address on the ledger.\n     * @param [nimiqVersion] - Optionally choose which Nimiq library version to use for internal computations.\n     * @returns An object with the publicKey.\n     * @example\n     * nim.getPublicKey(\"44'/242'/0'/0'\").then(o => o.publicKey)\n     */\n    public async getPublicKey(\n        path: string,\n        boolValidate: boolean = true,\n        boolDisplay: boolean = false,\n        nimiqVersion: NimiqVersion = NimiqVersion.ALBATROSS,\n    ): Promise<{ publicKey: Uint8Array }> {\n        if (boolValidate) {\n            // Start loading Nimiq core later needed for validation.\n            loadNimiq(nimiqVersion, /* include cryptography */ true).catch(() => {});\n        }\n\n        const pathBuffer = parsePath(path);\n        // Validation message including prefix \"dummy-data:\" as required since app version 2.0 to avoid the risks of\n        // blind signing.\n        const validationMessage = Buffer.from('dummy-data:p=np?', 'ascii');\n        const data = boolValidate ? Buffer.concat([pathBuffer, validationMessage]) : pathBuffer;\n\n        let response: Buffer;\n        response = await this._transport.send(\n            CLA,\n            INS_GET_PK,\n            boolValidate ? P1_VALIDATE : P1_NO_VALIDATE,\n            boolDisplay ? P2_CONFIRM : P2_NO_CONFIRM,\n            data,\n            [SW_OK, SW_KEEP_ALIVE],\n        );\n        // handle heartbeat\n        while (response.slice(response.length - 2).readUInt16BE(0) === SW_KEEP_ALIVE) {\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(CLA, INS_KEEP_ALIVE, 0, 0, undefined, [SW_OK, SW_KEEP_ALIVE]);\n        }\n\n        let offset = 0;\n        const publicKey = response.slice(offset, offset + 32);\n        offset += 32;\n        if (boolValidate) {\n            const signature = response.slice(offset, offset + 64);\n            if (!await verifySignature(validationMessage, signature, publicKey, nimiqVersion)) {\n                throw new Error(\n                    'Bad signature. Keypair is invalid. Please report this.',\n                );\n            }\n        }\n        return { publicKey };\n    }\n\n    /* eslint-disable lines-between-class-members */\n    /**\n     * Sign a Nimiq transaction.\n     * @param path - A path in BIP 32 format.\n     * @param txContent - Transaction content in serialized form.\n     * @param [nimiqVersion] - Of which format / version the serialized transaction is. By default Albatross.\n     * @param [appVersion] - For legacy transactions used to determine whether to transmit a version byte. If the\n     *  connected app version is already known, you can pass it to avoid the overhead of querying it again.\n     * @returns An object with the signature.\n     * @example\n     * nim.signTransaction(\"44'/242'/0'/0'\", txContent).then(o => o.signature)\n     */\n    public async signTransaction(\n        path: string,\n        txContent: Uint8Array,\n        nimiqVersion: NimiqVersion.LEGACY,\n        appVersion?: string,\n    ): Promise<{ signature: Uint8Array, stakerSignature?: undefined }>;\n    public async signTransaction(\n        path: string,\n        txContent: Uint8Array,\n        nimiqVersion?: NimiqVersion,\n    ): Promise<{ signature: Uint8Array, stakerSignature?: Uint8Array }>;\n    public async signTransaction(\n        path: string,\n        txContent: Uint8Array,\n        nimiqVersion: NimiqVersion = NimiqVersion.ALBATROSS,\n        appVersion?: string,\n    ): Promise<{ signature: Uint8Array, stakerSignature?: Uint8Array }> {\n        // The Nimiq version byte was added in app version 2. It supports both, legacy and Albatross transactions, and\n        // is the first app version to support Albatross. Note that wrongly sending a legacy transaction without version\n        // byte to the 2.0 app does no harm, as the app will reject it. Neither does sending an Albatross transaction,\n        // with version byte, to a legacy app before 2.0 as the app will interpret the version byte of value 1 as the\n        // first byte of the uint16 data length, resulting in a data length longer than the allowed max which will be\n        // rejected.\n        if (nimiqVersion === NimiqVersion.LEGACY && !appVersion) {\n            ({ version: appVersion } = await getAppNameAndVersion(\n                this._transport,\n                U2F_SCRAMBLE_KEY,\n                /* withApiLock */ false, // Don't lock the api, as we already locked it for signTransaction.\n            ));\n        }\n        const includeVersionByte = nimiqVersion === NimiqVersion.ALBATROSS || parseInt(appVersion || '') >= 2;\n\n        const pathBuffer = parsePath(path);\n        const versionByteBuffer = includeVersionByte\n            ? new Uint8Array([nimiqVersion === NimiqVersion.ALBATROSS ? 1 : 0])\n            : new Uint8Array();\n        const transactionBuffer = Buffer.from(txContent);\n        const apdus = [];\n        let transactionChunkSize = APDU_MAX_SIZE - pathBuffer.length - versionByteBuffer.length;\n        if (transactionBuffer.length <= transactionChunkSize) {\n            // it fits in a single apdu\n            apdus.push(Buffer.concat([pathBuffer, versionByteBuffer, transactionBuffer]));\n        } else {\n            // we need to send multiple apdus to transmit the entire transaction\n            let transactionChunk = Buffer.alloc(transactionChunkSize);\n            let offset = 0;\n            transactionBuffer.copy(transactionChunk, 0, offset, transactionChunkSize);\n            apdus.push(Buffer.concat([pathBuffer, versionByteBuffer, transactionChunk]));\n            offset += transactionChunkSize;\n            while (offset < transactionBuffer.length) {\n                const remaining = transactionBuffer.length - offset;\n                transactionChunkSize = remaining < APDU_MAX_SIZE ? remaining : APDU_MAX_SIZE;\n                transactionChunk = Buffer.alloc(transactionChunkSize);\n                transactionBuffer.copy(transactionChunk, 0, offset, offset + transactionChunkSize);\n                offset += transactionChunkSize;\n                apdus.push(transactionChunk);\n            }\n        }\n\n        let isHeartbeat = false;\n        let chunkIndex = 0;\n        let status: number;\n        let response: Buffer;\n        do {\n            const data = apdus[chunkIndex];\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(\n                CLA,\n                isHeartbeat ? INS_KEEP_ALIVE : INS_SIGN_TX,\n                chunkIndex === 0 ? P1_FIRST_APDU : P1_MORE_APDU, // note that for heartbeat p1, p2 and data are ignored\n                chunkIndex === apdus.length - 1 ? P2_LAST_APDU : P2_MORE_APDU,\n                data,\n                [SW_OK, SW_CANCEL, SW_KEEP_ALIVE],\n            );\n            status = response.slice(response.length - 2).readUInt16BE(0);\n            isHeartbeat = status === SW_KEEP_ALIVE;\n            if (!isHeartbeat) {\n                // we can continue sending data or end the loop when all data was sent\n                ++chunkIndex;\n            }\n        } while (isHeartbeat || chunkIndex < apdus.length);\n\n        if (status !== SW_OK) throw new Error('Transaction approval request was rejected');\n        const signatureCount = (response.length - /* sw */ 2) / 64;\n        if (signatureCount !== 1 && signatureCount !== 2) {\n            throw new Error('Unexpected response length');\n        }\n        const signature = response.slice(0, 64);\n        let stakerSignature: Uint8Array | undefined;\n        if (signatureCount === 2) {\n            if (nimiqVersion === NimiqVersion.LEGACY) {\n                throw new Error('Unexpected staker signature on legacy transaction');\n            }\n            stakerSignature = response.slice(64, 128);\n        }\n        return { signature, stakerSignature };\n    }\n    /* eslint-enable lines-between-class-members */\n\n    /**\n     * Sign a message with a Nimiq key.\n     * @param path - A path in BIP 32 format.\n     * @param message - Message to sign as utf8 string or arbitrary bytes.\n     * @param [flags] - Flags to pass. Currently supported: `preferDisplayTypeHex` and `preferDisplayTypeHash`.\n     * @returns An object with the signature.\n     * @example\n     * nim.signMessage(\"44'/242'/0'/0'\", message).then(o => o.signature)\n     */\n    public async signMessage(\n        path: string,\n        message: string | Uint8Array,\n        flags?: number | {\n            preferDisplayTypeHex: boolean, // first choice, if multiple flags are set\n            preferDisplayTypeHash: boolean, // second choice, if multiple flags are set\n        },\n    ): Promise<{ signature: Uint8Array }> {\n        const pathBuffer = parsePath(path);\n        const messageBuffer = typeof message === 'string'\n            ? Buffer.from(message, 'utf8') // throws if invalid utf8\n            : Buffer.from(message);\n        flags = typeof flags === 'object'\n            // eslint-disable-next-line no-bitwise\n            ? (flags.preferDisplayTypeHex ? MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HEX : 0)\n                | (flags.preferDisplayTypeHash ? MESSAGE_FLAG_PREFER_DISPLAY_TYPE_HASH : 0)\n            : flags || 0;\n        const flagsBuffer = Buffer.from([flags]);\n        if (messageBuffer.length >= 2 ** 32) {\n            // the message length must fit an uint32\n            throw new Error('Message too long');\n        }\n        const messageLengthBuffer = Buffer.alloc(4);\n        messageLengthBuffer.writeUInt32BE(messageBuffer.length);\n        const apdus = [];\n\n        let messageChunkSize = Math.min(\n            messageBuffer.length,\n            APDU_MAX_SIZE - pathBuffer.length - flagsBuffer.length - messageLengthBuffer.length,\n        );\n        let messageChunk = Buffer.alloc(messageChunkSize);\n        let messageOffset = 0;\n        messageBuffer.copy(messageChunk, 0, messageOffset, messageChunkSize);\n        apdus.push(Buffer.concat([pathBuffer, flagsBuffer, messageLengthBuffer, messageChunk]));\n        messageOffset += messageChunkSize;\n        while (messageOffset < messageBuffer.length) {\n            messageChunkSize = Math.min(messageBuffer.length - messageOffset, APDU_MAX_SIZE);\n            messageChunk = Buffer.alloc(messageChunkSize);\n            messageBuffer.copy(messageChunk, 0, messageOffset, messageOffset + messageChunkSize);\n            messageOffset += messageChunkSize;\n            apdus.push(messageChunk);\n        }\n\n        let isHeartbeat = false;\n        let chunkIndex = 0;\n        let status: number;\n        let response: Buffer;\n        do {\n            const data = apdus[chunkIndex];\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(\n                CLA,\n                isHeartbeat ? INS_KEEP_ALIVE : INS_SIGN_MESSAGE,\n                chunkIndex === 0 ? P1_FIRST_APDU : P1_MORE_APDU, // note that for heartbeat p1, p2 and data are ignored\n                chunkIndex === apdus.length - 1 ? P2_LAST_APDU : P2_MORE_APDU,\n                data,\n                [SW_OK, SW_CANCEL, SW_KEEP_ALIVE],\n            );\n            status = response.slice(response.length - 2).readUInt16BE(0);\n            isHeartbeat = status === SW_KEEP_ALIVE;\n            if (!isHeartbeat) {\n                // we can continue sending data or end the loop when all data was sent\n                ++chunkIndex;\n            }\n        } while (isHeartbeat || chunkIndex < apdus.length);\n\n        if (status !== SW_OK) throw new Error('Message approval request was rejected');\n        const signature = response.slice(0, response.length - 2);\n        return { signature };\n    }\n}\n"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA,IAAY,YAGX,CAAA;AAHD,CAAA,UAAY,YAAY,EAAA;AACpB,IAAA,YAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvB,IAAA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACrB,CAAC,EAHW,YAAY,KAAZ,YAAY,GAGvB,EAAA,CAAA,CAAA;;ACQK,SAAU,aAAa,CAAC,IAAyB,EAAA;;;AAGnD,IAAA,OAAO,eAAe,IAAI,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,KAAK,EAAE,CAAC;AACxF,CAAC;AAQM,eAAe,SAAS,CAC3B,YAAqB,EACrB,8BAAuC,EACvC,WAAW,GAAG,IAAI,EAAA;AAElB,IAAA,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,KAAK,YAAY,CAAC,SAAS;AACrE,UAAE,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;AACvC,UAAE;AACE,YAAA,mBAAmB,EAAE;AACrB,YAAA,IAAI,8BAA8B,GAAG,CAAC,2BAA2B,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE;AACvF,SAAA,CACJ,CAAC;AACF,IAAA,OAAO,KAAuB,CAAC;AACnC,CAAC;AAiBD,MAAM,mBAAmB,GAAG,OAAO,aAAa,KAAK,WAAW;AAC5D;AACA,0CAA0C,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;;OAEtE,oCAAoC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CACrE,CAAC;AACF,MAAM,iBAAiB,GAAG,mBAAmB;;;;AAIzC,MAAE,wBAAwB;;;MAGxB,oDAAoD,CAAC;AAC3D,IAAI,gBAAgB,GAAkD,IAAI,CAAC;AAE3E,eAAe,sBAAsB,CAAC,WAAW,GAAG,IAAI,EAAA;AACpD,IAAA,gBAAgB,GAAG,gBAAgB,IAAI,CAAC,YAAW;QAC/C,IAAI;AACA,YAAA,IAAI,WAAW,EAAE;;;gBAGb,YAAY,CAAC,GAAG,iBAAiB,CAAA,uBAAA,CAAyB,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AAC9E,aAAA;;;;;;;YAQD,MAAM,KAAK,GAAG,MAAM,OAAO,CAAG,EAAA,iBAAiB,CAAoB,kBAAA,CAAA,CAAC,CAAC;AACrE,YAAA,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;YAChC,MAAM,IAAI,EAAE,CAAC;AACb,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;YACR,gBAAgB,GAAG,IAAI,CAAC;AACxB,YAAA,MAAM,CAAC,CAAC;AACX,SAAA;KACJ,GAAG,CAAC;AACL,IAAA,OAAO,gBAAgB,CAAC;AAC5B,CAAC;AAED,MAAM,uBAAuB,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC;;AAE3E,MAAE,wBAAwB;;MAExB,+CAA+C,CAAC;AACtD,IAAI,sBAAsB,GAA+C,IAAI,CAAC;AAC9E,IAAI,8BAA8B,GAAyB,IAAI,CAAC;AAEhE;;AAEG;AACH,eAAe,mBAAmB,CAAC,WAAA,GAAqC,aAAa,EAAA;;IAGjF,IAAI,OAAO,KAAK,KAAK,WAAW;AAAE,QAAA,OAAO,KAAK,CAAC;IAE/C,sBAAsB,GAAG,sBAAsB,IAAI,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,KAAI;AACrF,QAAA,OAAO,CAAC,IAAI,CAAC,2EAA2E,CAAC,CAAC;QAC1F,MAAM,KAAK,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AACjD,QAAA,OAAO,CAAC,IAAI,GAAG,iBAAiB,CAAC;AACjC,QAAA,OAAO,CAAC,MAAM,GAAG,MAAK;AAClB,YAAA,OAAO,CAAC,UAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACzC,YAAA,OAAO,EAAE,CAAC;AACd,SAAC,CAAC;AACF,QAAA,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC,KAAI;AACpB,YAAA,OAAO,CAAC,UAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,CAAC,CAAC,CAAC;AACd,SAAC,CAAC;QACF,OAAO,CAAC,GAAG,GAAG,CAAA,EAAG,uBAAuB,CAAG,EAAA,WAAW,KAAK,CAAC;AAC5D,QAAA,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;KAC9B,CAAC,CAAC,IAAI,CACH,MAAM,KAAM;IACZ,CAAC,CAAC,KAAI;QACF,sBAAsB,GAAG,IAAI,CAAC;AAC9B,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7B,KAAC,CACJ,CAAC;AACF,IAAA,OAAO,sBAAsB,CAAC;AAClC,CAAC;AAED;;;AAGG;AACH,eAAe,2BAA2B,CAAC,WAAW,GAAG,IAAI,EAAA;AACzD,IAAA,8BAA8B,GAAG,8BAA8B,IAAI,CAAC,YAAW;QAC3E,IAAI;AACA,YAAA,IAAI,WAAW,EAAE;;gBAEb,YAAY,CAAC,GAAG,uBAAuB,CAAA,gBAAA,CAAkB,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC1E,YAAY,CACR,CAAG,EAAA,uBAAuB,CAAgB,cAAA,CAAA,EAC1C,QAAQ,EACR,IAAI,EACJ,qDAAoC,CACvC,CAAC;AACL,aAAA;AAED,YAAA,MAAM,WAAW,GAAG,MAAM,mBAAmB,EAAE,CAAC;;AAEhD,YAAA,MAAM,WAAW,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC3C,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;YACR,8BAA8B,GAAG,IAAI,CAAC;AACtC,YAAA,MAAM,CAAC,CAAC;AACX,SAAA;KACJ,GAAG,CAAC;AACL,IAAA,OAAO,8BAA8B,CAAC;AAC1C,CAAC;AAED,SAAS,YAAY,CAAC,KAAa,EAAE,EAAU,EAAE,WAAqB,EAAE,SAAkB,EAAA;IACtF,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AAC5C,IAAA,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;AACrB,IAAA,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACb,IAAA,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACnE,IAAA,IAAI,WAAW;AAAE,QAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACvC,IAAA,IAAI,SAAS;AAAE,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC1C,IAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACpC;;AChLM,SAAU,SAAS,CAAC,IAAY,EAAA;AAClC,IAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;AAChC,QAAA,MAAM,IAAI,KAAK,CACX,CAAA,8BAAA,EAAiC,IAAI,CAAuE,qEAAA,CAAA;AAC1G,cAAA,8BAA8B,CACnC,CAAC;AACL,KAAA;AAED,IAAA,MAAM,SAAS,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;QACrD,IAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAChC,QAAA,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;AACtB,YAAA,MAAM,IAAI,KAAK,CAAC,iBAAiB,IAAI,CAAA,CAAE,CAAC,CAAC;AAC5C,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACrB,MAAM,IAAI,UAAU,CAAC;AACxB,SAAA;AAAM,aAAA;YACH,MAAM,IAAI,KAAK,CACX,+DAA+D;kBAC7D,uFAAuF;AACvF,kBAAA,8BAA8B,CACnC,CAAC;AACL,SAAA;AACD,QAAA,OAAO,MAAM,CAAC;AAClB,KAAC,CAAC,CAAC;AAEH,IAAA,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC1D,IAAA,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;IACjC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAI;QACjC,UAAU,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACrD,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,UAAU,CAAC;AACtB,CAAC;AAEM,eAAe,kBAAkB,CAAC,SAAiB,EAAE,YAA0B,EAAA;;IAElF,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,YAAY,6BAA6B,IAAI,CAAC,CAAC;AAC7E,IAAA,OAAO,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,qBAAqB,EAAE,CAAC;AAC9E,CAAC;AAEM,eAAe,eAAe,CACjC,IAAyB,EACzB,SAA8B,EAC9B,SAA8B,EAC9B,YAA0B,EAAA;;IAG1B,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,YAAY,6BAA6B,IAAI,CAAC,CAAC;AAC7E,IAAA,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;QACtB,MAAM,cAAc,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACtD,MAAM,cAAc,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACtD,KAAA;AAAM,SAAA;QACH,MAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC9D,MAAM,cAAc,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACtD,KAAA;AACL;;ACzDA;AACA;AAEe,eAAe,oBAAoB,CAAC,SAAoB,EAAE,WAAmB,EAAE,WAAW,GAAG,IAAI,EAAA;;;;;;;;AAS5G,IAAA,IAAI,2BAA2B,GAAG,YAAW;;AAEzC,QAAA,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9D,QAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,MAAM,KAAK,MAAM;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACtE,IAAI,MAAM,GAAG,CAAC,CAAC;AACf,QAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAClC,IAAI,MAAM,KAAK,CAAC;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;AACxD,QAAA,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;AACtC,QAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,IAAI,UAAU,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC9E,QAAA,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;AACzC,QAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,IAAI,aAAa,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACpF,QAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;AAC7B,KAAC,CAAC;;;;;AAKF,IAAA,IAAI,WAAW,EAAE;;;AAGb,QAAA,2BAA2B,GAAG,SAAS,CAAC,oBAAoB,CACxD,6BAA6B,EAC7B,2BAA2B,EAC3B,SAAS,EACT,WAAW,CACd,CAAC;AACL,KAAA;AAAM,SAAA;;AAEH,QAAA,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AACzC,KAAA;IACD,OAAO,2BAA2B,EAAE,CAAC;AACzC;;ACvCA,MAAM,GAAG,GAAG,IAAI,CAAC;AACjB,MAAM,UAAU,GAAG,IAAI,CAAC;AACxB,MAAM,WAAW,GAAG,IAAI,CAAC;AACzB,MAAM,cAAc,GAAG,IAAI,CAAC;AAC5B,MAAM,gBAAgB,GAAG,IAAI,CAAC;AAE9B,MAAM,aAAa,GAAG,GAAG,CAAC;AAC1B,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,MAAM,YAAY,GAAG,IAAI,CAAC;AAC1B,MAAM,cAAc,GAAG,IAAI,CAAC;AAC5B,MAAM,WAAW,GAAG,IAAI,CAAC;AACzB,MAAM,YAAY,GAAG,IAAI,CAAC;AAC1B,MAAM,YAAY,GAAG,IAAI,CAAC;AAC1B,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,MAAM,UAAU,GAAG,IAAI,CAAC;AAExB,MAAM,oCAAoC,GAAG,CAAC,IAAI,CAAC,CAAC;AACpD,MAAM,qCAAqC,GAAG,CAAC,IAAI,CAAC,CAAC;AAErD;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK,GAAG,MAAM,CAAC;AACrB,MAAM,SAAS,GAAG,MAAM,CAAC;AACzB,MAAM,aAAa,GAAG,MAAM,CAAC;AAE7B,MAAM,gBAAgB,GAAG,KAAK,CAAC;AAW/B;;;;;;;;;;;AAWG;AACW,MAAO,WAAW,CAAA;AACpB,IAAA,UAAU,CAAY;AAE9B,IAAA,WAAA,CAAY,SAAoB,EAAA;AAC5B,QAAA,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;;;;;AAK5B,QAAA,SAAS,CAAC,qBAAqB,CAC3B,IAAI,EACJ,CAAC,cAAc,EAAE,iBAAiB,CAAC,EACnC,gBAAgB,CACnB,CAAC;KACL;AAED,IAAA,IAAW,SAAS,GAAA;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;AAED;;;AAGG;AACI,IAAA,MAAM,KAAK,GAAA;QACd,IAAI;AACA,YAAA,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;AACjC,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;;AAEX,SAAA;KACJ;AAED;;;;;AAKG;AACI,IAAA,MAAM,oBAAoB,GAAA;QAC7B,OAAO,oBAAoB,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;KAClE;AAED;;;;;;;;;AASG;AACI,IAAA,MAAM,UAAU,CACnB,IAAY,EACZ,YAAwB,GAAA,IAAI,EAC5B,WAAA,GAAuB,KAAK,EAC5B,YAA6B,GAAA,YAAY,CAAC,SAAS,EAAA;;AAGnD,QAAA,SAAS,CAAC,YAAY,6BAA6B,IAAI,CAAC,CAAC,KAAK,CAAC,MAAO,GAAC,CAAC,CAAC;AAEzE,QAAA,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AAC7F,QAAA,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,YAAY,CAAC,CAAC;QAC/E,OAAO,EAAE,OAAO,EAAE,CAAC;KACtB;AAED;;;;;;;;;AASG;AACI,IAAA,MAAM,YAAY,CACrB,IAAY,EACZ,YAAwB,GAAA,IAAI,EAC5B,WAAA,GAAuB,KAAK,EAC5B,YAA6B,GAAA,YAAY,CAAC,SAAS,EAAA;AAEnD,QAAA,IAAI,YAAY,EAAE;;AAEd,YAAA,SAAS,CAAC,YAAY,6BAA6B,IAAI,CAAC,CAAC,KAAK,CAAC,MAAO,GAAC,CAAC,CAAC;AAC5E,SAAA;AAED,QAAA,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;;;QAGnC,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC,GAAG,UAAU,CAAC;AAExF,QAAA,IAAI,QAAgB,CAAC;AACrB,QAAA,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CACjC,GAAG,EACH,UAAU,EACV,YAAY,GAAG,WAAW,GAAG,cAAc,EAC3C,WAAW,GAAG,UAAU,GAAG,aAAa,EACxC,IAAI,EACJ,CAAC,KAAK,EAAE,aAAa,CAAC,CACzB,CAAC;;AAEF,QAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,aAAa,EAAE;;YAE1E,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;AACvG,SAAA;QAED,IAAI,MAAM,GAAG,CAAC,CAAC;AACf,QAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;QACtD,MAAM,IAAI,EAAE,CAAC;AACb,QAAA,IAAI,YAAY,EAAE;AACd,YAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACtD,YAAA,IAAI,CAAC,MAAM,eAAe,CAAC,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,CAAC,EAAE;AAC/E,gBAAA,MAAM,IAAI,KAAK,CACX,wDAAwD,CAC3D,CAAC;AACL,aAAA;AACJ,SAAA;QACD,OAAO,EAAE,SAAS,EAAE,CAAC;KACxB;AAyBM,IAAA,MAAM,eAAe,CACxB,IAAY,EACZ,SAAqB,EACrB,YAAA,GAA6B,YAAY,CAAC,SAAS,EACnD,UAAmB,EAAA;;;;;;;QAQnB,IAAI,YAAY,KAAK,YAAY,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE;AACrD,YAAA,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,MAAM,oBAAoB,CACjD,IAAI,CAAC,UAAU,EACf,gBAAgB;AAChB,8BAAkB,KAAK,CAC1B,EAAE;AACN,SAAA;AACD,QAAA,MAAM,kBAAkB,GAAG,YAAY,KAAK,YAAY,CAAC,SAAS,IAAI,QAAQ,CAAC,UAAU,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;AAEtG,QAAA,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,iBAAiB,GAAG,kBAAkB;AACxC,cAAE,IAAI,UAAU,CAAC,CAAC,YAAY,KAAK,YAAY,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACnE,cAAE,IAAI,UAAU,EAAE,CAAC;QACvB,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,oBAAoB,GAAG,aAAa,GAAG,UAAU,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC;AACxF,QAAA,IAAI,iBAAiB,CAAC,MAAM,IAAI,oBAAoB,EAAE;;AAElD,YAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;AACjF,SAAA;AAAM,aAAA;;YAEH,IAAI,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC1D,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC;AAC1E,YAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,iBAAiB,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC7E,MAAM,IAAI,oBAAoB,CAAC;AAC/B,YAAA,OAAO,MAAM,GAAG,iBAAiB,CAAC,MAAM,EAAE;AACtC,gBAAA,MAAM,SAAS,GAAG,iBAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;AACpD,gBAAA,oBAAoB,GAAG,SAAS,GAAG,aAAa,GAAG,SAAS,GAAG,aAAa,CAAC;AAC7E,gBAAA,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;AACtD,gBAAA,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,GAAG,oBAAoB,CAAC,CAAC;gBACnF,MAAM,IAAI,oBAAoB,CAAC;AAC/B,gBAAA,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAChC,aAAA;AACJ,SAAA;QAED,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,UAAU,GAAG,CAAC,CAAC;AACnB,QAAA,IAAI,MAAc,CAAC;AACnB,QAAA,IAAI,QAAgB,CAAC;QACrB,GAAG;AACC,YAAA,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;;AAE/B,YAAA,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CACjC,GAAG,EACH,WAAW,GAAG,cAAc,GAAG,WAAW,EAC1C,UAAU,KAAK,CAAC,GAAG,aAAa,GAAG,YAAY;YAC/C,UAAU,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,GAAG,YAAY,EAC7D,IAAI,EACJ,CAAC,KAAK,EAAE,SAAS,EAAE,aAAa,CAAC,CACpC,CAAC;AACF,YAAA,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC7D,YAAA,WAAW,GAAG,MAAM,KAAK,aAAa,CAAC;YACvC,IAAI,CAAC,WAAW,EAAE;;AAEd,gBAAA,EAAE,UAAU,CAAC;AAChB,aAAA;AACJ,SAAA,QAAQ,WAAW,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE;QAEnD,IAAI,MAAM,KAAK,KAAK;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;AACnF,QAAA,MAAM,cAAc,GAAG,CAAC,QAAQ,CAAC,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;AAC3D,QAAA,IAAI,cAAc,KAAK,CAAC,IAAI,cAAc,KAAK,CAAC,EAAE;AAC9C,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;AACjD,SAAA;QACD,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACxC,QAAA,IAAI,eAAuC,CAAC;QAC5C,IAAI,cAAc,KAAK,CAAC,EAAE;AACtB,YAAA,IAAI,YAAY,KAAK,YAAY,CAAC,MAAM,EAAE;AACtC,gBAAA,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;AACxE,aAAA;YACD,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;AAC7C,SAAA;AACD,QAAA,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;KACzC;;AAGD;;;;;;;;AAQG;AACI,IAAA,MAAM,WAAW,CACpB,IAAY,EACZ,OAA4B,EAC5B,KAGC,EAAA;AAED,QAAA,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACnC,QAAA,MAAM,aAAa,GAAG,OAAO,OAAO,KAAK,QAAQ;cAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;AAC9B,cAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3B,QAAA,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ;;AAE7B,cAAE,CAAC,KAAK,CAAC,oBAAoB,GAAG,oCAAoC,GAAG,CAAC;mBACjE,KAAK,CAAC,qBAAqB,GAAG,qCAAqC,GAAG,CAAC,CAAC;AAC/E,cAAE,KAAK,IAAI,CAAC,CAAC;QACjB,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACzC,QAAA,IAAI,aAAa,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE;;AAEjC,YAAA,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACvC,SAAA;QACD,MAAM,mBAAmB,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5C,QAAA,mBAAmB,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,KAAK,GAAG,EAAE,CAAC;QAEjB,IAAI,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAC3B,aAAa,CAAC,MAAM,EACpB,aAAa,GAAG,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,mBAAmB,CAAC,MAAM,CACtF,CAAC;QACF,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAClD,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;AACrE,QAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,WAAW,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;QACxF,aAAa,IAAI,gBAAgB,CAAC;AAClC,QAAA,OAAO,aAAa,GAAG,aAAa,CAAC,MAAM,EAAE;AACzC,YAAA,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,GAAG,aAAa,EAAE,aAAa,CAAC,CAAC;AACjF,YAAA,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAC9C,YAAA,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,aAAa,EAAE,aAAa,GAAG,gBAAgB,CAAC,CAAC;YACrF,aAAa,IAAI,gBAAgB,CAAC;AAClC,YAAA,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC5B,SAAA;QAED,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,UAAU,GAAG,CAAC,CAAC;AACnB,QAAA,IAAI,MAAc,CAAC;AACnB,QAAA,IAAI,QAAgB,CAAC;QACrB,GAAG;AACC,YAAA,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;;AAE/B,YAAA,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CACjC,GAAG,EACH,WAAW,GAAG,cAAc,GAAG,gBAAgB,EAC/C,UAAU,KAAK,CAAC,GAAG,aAAa,GAAG,YAAY;YAC/C,UAAU,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,GAAG,YAAY,EAC7D,IAAI,EACJ,CAAC,KAAK,EAAE,SAAS,EAAE,aAAa,CAAC,CACpC,CAAC;AACF,YAAA,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC7D,YAAA,WAAW,GAAG,MAAM,KAAK,aAAa,CAAC;YACvC,IAAI,CAAC,WAAW,EAAE;;AAEd,gBAAA,EAAE,UAAU,CAAC;AAChB,aAAA;AACJ,SAAA,QAAQ,WAAW,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE;QAEnD,IAAI,MAAM,KAAK,KAAK;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;AAC/E,QAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,EAAE,SAAS,EAAE,CAAC;KACxB;AACJ;;;;"}