{"version":3,"file":"low-level-api.es.js","sources":["source-mapped://source-mapped/src/lib/load-nimiq.ts","source-mapped://source-mapped/src/low-level-api/low-level-api-utils.ts","source-mapped://source-mapped/src/low-level-api/low-level-api.ts"],"sourcesContent":["type Nimiq = typeof import('@nimiq/core-web');\n\nconst coreBasePath = 'https://cdn.nimiq.com/latest/';\n\nlet nimiqCorePromise: Promise<Nimiq> | null = null;\n\n/**\n * Lazy-load the Nimiq core api from the cdn server if it's not loaded yet.\n */\nexport async function loadNimiqCore(coreVariant: 'web' | 'web-offline' = 'web-offline'): Promise<Nimiq> {\n    // @ts-ignore Return global Nimiq if already loaded.\n    if (window.Nimiq) return window.Nimiq;\n\n    nimiqCorePromise = nimiqCorePromise || new Promise((resolve, reject) => {\n        const $head = document.getElementsByTagName('head')[0];\n        const $script = document.createElement('script');\n        $script.type = 'text/javascript';\n        $script.onload = () => {\n            $script.parentNode!.removeChild($script);\n            resolve();\n        };\n        $script.onerror = (e) => {\n            $script.parentNode!.removeChild($script);\n            reject(e);\n        };\n        $script.src = `${coreBasePath}${coreVariant}.js`;\n        $head.appendChild($script);\n    }).then(\n        () => {\n            // @ts-ignore Nimiq is global but to discourage usage as global var we did not declare a global type.\n            const { Nimiq } = window;\n            return Nimiq;\n        },\n        (e) => {\n            nimiqCorePromise = null;\n            return Promise.reject(e);\n        },\n    );\n    return nimiqCorePromise;\n}\n\n/**\n * Load the WebAssembly and module for cryptographic functions. You will have to do this before calculating hashes,\n * deriving keys or addresses, signing transactions or messages, etc.\n */\nexport async function loadNimiqCryptography(): Promise<void> {\n    // Note that there is no need to cache a promise like in loadNimiqCore for this call, as loadNimiqCore and doImport\n    // already do that themselves.\n    const Nimiq = await loadNimiqCore();\n    await Nimiq.WasmHelper.doImport();\n}\n","import { loadNimiqCore, loadNimiqCryptography } from '../lib/load-nimiq';\n\nexport function parsePath(path: string): Buffer {\n    if (!path.startsWith('44\\'/242\\'')) {\n        throw new Error(\n            `Not a Nimiq BIP32 path. Path: ${path}. The Nimiq app is authorized only for paths starting with 44'/242'. `\n            + ' Example: 44\\'/242\\'/0\\'/0\\'',\n        );\n    }\n\n    const pathParts: number[] = path.split('/').map((part) => {\n        let number = parseInt(part, 10);\n        if (Number.isNaN(number)) {\n            throw new Error(`Invalid path: ${path}`);\n        }\n        if (part.endsWith('\\'')) {\n            number += 0x80000000;\n        } else {\n            throw new Error(\n                'Detected a non-hardened path element in requested BIP32 path.'\n                + ' Non-hardended paths are not supported at this time. Please use an all-hardened path.'\n                + ' Example: 44\\'/242\\'/0\\'/0\\'',\n            );\n        }\n        return number;\n    });\n\n    const pathBuffer = Buffer.alloc(1 + pathParts.length * 4);\n    pathBuffer[0] = pathParts.length;\n    pathParts.forEach((element, index) => {\n        pathBuffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return pathBuffer;\n}\n\nexport async function publicKeyToAddress(publicKey: Buffer): Promise<string> {\n    const [Nimiq] = await Promise.all([\n        loadNimiqCore(),\n        loadNimiqCryptography(), // needed for hashing public key to an address\n    ]);\n    return Nimiq.PublicKey.unserialize(new Nimiq.SerialBuffer(publicKey)).toAddress().toUserFriendlyAddress();\n}\n\nexport async function verifySignature(\n    data: Buffer,\n    signature: Buffer,\n    publicKey: Buffer,\n): Promise<boolean> {\n    const [Nimiq] = await Promise.all([loadNimiqCore(), loadNimiqCryptography()]);\n    const nimiqSignature = Nimiq.Signature.unserialize(new Nimiq.SerialBuffer(signature));\n    const nimiqPublicKey = Nimiq.PublicKey.unserialize(new Nimiq.SerialBuffer(publicKey));\n    return nimiqSignature.verify(nimiqPublicKey, data);\n}\n","import {\n    parsePath,\n    publicKeyToAddress,\n    verifySignature,\n} from './low-level-api-utils';\nimport { loadNimiqCore, loadNimiqCryptography } from '../lib/load-nimiq';\n\ntype Transport = import('@ledgerhq/hw-transport').default;\n\nconst CLA = 0xe0;\nconst INS_GET_PK = 0x02;\nconst INS_SIGN_TX = 0x04;\nconst INS_GET_CONF = 0x06;\nconst INS_KEEP_ALIVE = 0x08;\n\nconst APDU_MAX_SIZE = 150;\nconst P1_FIRST_APDU = 0x00;\nconst P1_MORE_APDU = 0x80;\nconst P1_NO_VALIDATE = 0x00;\nconst P1_VALIDATE = 0x01;\nconst P2_LAST_APDU = 0x00;\nconst P2_MORE_APDU = 0x80;\nconst P2_NO_CONFIRM = 0x00;\nconst P2_CONFIRM = 0x01;\n\nconst SW_OK = 0x9000;\nconst SW_CANCEL = 0x6985;\nconst SW_KEEP_ALIVE = 0x6e02;\n\n// The @ledgerhq libraries use Node Buffers which need to be polyfilled in the browser. To avoid the need to bundle such\n// polyfills that an app likely already has bundled in the @ledgerhq libraries, this library expects a global polyfill\n// declared on window.\ndeclare global {\n    interface Window {\n        Buffer?: typeof Buffer;\n    }\n}\n\n/**\n * Nimiq API\n *\n * Low level api for communication with the Ledger wallet Nimiq app. This lib is compatible with all @ledgerhq/transport\n * libraries but does on the other hand not include optimizations for specific transport types and returns raw bytes.\n *\n * This library is in nature similar to other hw-app packages in @ledgerhq/ledgerjs and partially based on their code,\n * licenced under the Apache 2.0 licence.\n *\n * @example\n * const nim = new LowLevelApi(transport)\n */\nexport default class LowLevelApi {\n    private _transport: Transport;\n\n    constructor(transport: Transport) {\n        this._transport = transport;\n        transport.decorateAppAPIMethods(\n            this,\n            ['getAppConfiguration', 'getPublicKey', 'signTransaction'],\n            'w0w',\n        );\n    }\n\n    /**\n     * Close the transport instance. Note that this does not emit a disconnect. Disconnects are only emitted when the\n     * device actually disconnects (or switches it's descriptor which happens when switching to the dashboard or apps).\n     */\n    public close() {\n        try {\n            this._transport.close();\n        } catch (e) {\n            // Ignore. Transport might already be closed.\n        }\n    }\n\n    /**\n     * Get the version of the connected Ledger Nimiq App. Note that some other apps like the Ethereum app also respond\n     * to this call.\n     */\n    public async getAppConfiguration(): Promise<{ version: string }> {\n        // Note that no heartbeat is required here as INS_GET_CONF is not interactive but thus answers directly\n        const [, major, minor, patch] = await this._transport.send(CLA, INS_GET_CONF, 0x00, 0x00);\n        const version = `${major}.${minor}.${patch}`;\n        return { version };\n    }\n\n    /**\n     * Get Nimiq address for a given BIP 32 path.\n     * @param path - A path in BIP 32 format.\n     * @param boolValidate - Optionally enable key pair validation.\n     * @param boolDisplay - Optionally display the address on the ledger.\n     * @returns An object with the address\n     * @example\n     * nim.getAddress(\"44'/242'/0'/0'\").then(o => o.address)\n     */\n    public async getAddress(\n        path: string,\n        boolValidate: boolean = true,\n        boolDisplay: boolean = false,\n    ): Promise<{ address: string }> {\n        // start loading Nimiq core later needed for transforming public key to address and optional validation\n        loadNimiqCore();\n        loadNimiqCryptography();\n\n        const { publicKey } = await this.getPublicKey(path, boolValidate, boolDisplay);\n        const address = await publicKeyToAddress(Buffer.from(publicKey));\n        return { address };\n    }\n\n    /**\n     * Get Nimiq public key for a given BIP 32 path.\n     * @param path - A path in BIP 32 format.\n     * @param boolValidate - Optionally enable key pair validation.\n     * @param boolDisplay - Optionally display the corresponding address on the ledger.\n     * @returns An object with the publicKey\n     * @example\n     * nim.getPublicKey(\"44'/242'/0'/0'\").then(o => o.publicKey)\n     */\n    public async getPublicKey(\n        path: string,\n        boolValidate: boolean = true,\n        boolDisplay: boolean = false,\n    ): Promise<{ publicKey: Uint8Array }> {\n        if (boolValidate) {\n            // start loading Nimiq core later needed for validation\n            loadNimiqCore();\n            loadNimiqCryptography();\n        }\n\n        const pathBuffer = parsePath(path);\n        const verifyMsg = Buffer.from('p=np?', 'ascii');\n        const data = Buffer.concat([pathBuffer, verifyMsg]);\n\n        let response: Buffer;\n        response = await this._transport.send(\n            CLA,\n            INS_GET_PK,\n            boolValidate ? P1_VALIDATE : P1_NO_VALIDATE,\n            boolDisplay ? P2_CONFIRM : P2_NO_CONFIRM,\n            data,\n            [SW_OK, SW_KEEP_ALIVE],\n        );\n        // handle heartbeat\n        while (response.slice(response.length - 2).readUInt16BE(0) === SW_KEEP_ALIVE) {\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(CLA, INS_KEEP_ALIVE, 0, 0, undefined, [SW_OK, SW_KEEP_ALIVE]);\n        }\n\n        let offset = 0;\n        const publicKey = response.slice(offset, offset + 32);\n        offset += 32;\n        if (boolValidate) {\n            const signature = response.slice(offset, offset + 64);\n            if (!await verifySignature(verifyMsg, signature, publicKey)) {\n                throw new Error(\n                    'Bad signature. Keypair is invalid. Please report this.',\n                );\n            }\n        }\n        return { publicKey };\n    }\n\n    /**\n     * Sign a Nimiq transaction.\n     * @param path - A path in BIP 32 format.\n     * @param txContent - Transaction content in serialized form.\n     * @returns An object with the signature\n     * @example\n     * nim.signTransaction(\"44'/242'/0'/0'\", signatureBase).then(o => o.signature)\n     */\n    public async signTransaction(\n        path: string,\n        txContent: Uint8Array,\n    ): Promise<{ signature: Uint8Array }> {\n        const pathBuffer = parsePath(path);\n        const transaction = Buffer.from(txContent);\n        const apdus = [];\n        let chunkSize = APDU_MAX_SIZE - pathBuffer.length;\n        if (transaction.length <= chunkSize) {\n            // it fits in a single apdu\n            apdus.push(Buffer.concat([pathBuffer, transaction]));\n        } else {\n            // we need to send multiple apdus to transmit the entire transaction\n            let chunk = Buffer.alloc(chunkSize);\n            let offset = 0;\n            transaction.copy(chunk, 0, offset, chunkSize);\n            apdus.push(Buffer.concat([pathBuffer, chunk]));\n            offset += chunkSize;\n            while (offset < transaction.length) {\n                const remaining = transaction.length - offset;\n                chunkSize = remaining < APDU_MAX_SIZE ? remaining : APDU_MAX_SIZE;\n                chunk = Buffer.alloc(chunkSize);\n                transaction.copy(chunk, 0, offset, offset + chunkSize);\n                offset += chunkSize;\n                apdus.push(chunk);\n            }\n        }\n\n        let isHeartbeat = false;\n        let chunkIndex = 0;\n        let status: number;\n        let response: Buffer;\n        do {\n            const data = apdus[chunkIndex];\n            // eslint-disable-next-line no-await-in-loop\n            response = await this._transport.send(\n                CLA,\n                isHeartbeat ? INS_KEEP_ALIVE : INS_SIGN_TX,\n                chunkIndex === 0 ? P1_FIRST_APDU : P1_MORE_APDU, // note that for heartbeat p1, p2 and data are ignored\n                chunkIndex === apdus.length - 1 ? P2_LAST_APDU : P2_MORE_APDU,\n                data,\n                [SW_OK, SW_CANCEL, SW_KEEP_ALIVE],\n            );\n            status = response.slice(response.length - 2).readUInt16BE(0);\n            isHeartbeat = status === SW_KEEP_ALIVE;\n            if (!isHeartbeat) {\n                // we can continue sending data or end the loop when all data was sent\n                ++chunkIndex;\n            }\n        } while (isHeartbeat || chunkIndex < apdus.length);\n\n        if (status !== SW_OK) throw new Error('Transaction approval request was rejected');\n        const signature = Buffer.from(response.slice(0, response.length - 2));\n        return {\n            signature: Uint8Array.from(signature),\n        };\n    }\n}\n"],"names":[],"mappings":"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"}